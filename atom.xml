<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zyj&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zhouyajun.cn/"/>
  <updated>2019-06-12T09:12:44.562Z</updated>
  <id>http://blog.zhouyajun.cn/</id>
  
  <author>
    <name>ZYJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo部署algolia搜索</title>
    <link href="http://blog.zhouyajun.cn/2019/06/04/hexo%E9%85%8D%E7%BD%AEalgolia%E6%90%9C%E7%B4%A2/"/>
    <id>http://blog.zhouyajun.cn/2019/06/04/hexo配置algolia搜索/</id>
    <published>2019-06-04T03:31:43.633Z</published>
    <updated>2019-06-12T09:12:44.562Z</updated>
    
    <content type="html"><![CDATA[<h5 id="注册algolia"><a href="#注册algolia" class="headerlink" title="注册algolia"></a>注册algolia</h5><blockquote><p><a href="https://www.algolia.com" target="_blank" rel="noopener">algolia官网</a></p></blockquote><blockquote><p>可以使用github 和谷歌账号 直接登录（直接跳过新手引导）</p></blockquote><h5 id="新建index"><a href="#新建index" class="headerlink" title="新建index"></a>新建index</h5><p><img src="http://qn.zhouyajun.cn/algolia_1.png" alt="新建index"></p><a id="more"></a><h5 id="获取key放到站点配置文件里面（不是主题的配置文件）"><a href="#获取key放到站点配置文件里面（不是主题的配置文件）" class="headerlink" title="获取key放到站点配置文件里面（不是主题的配置文件）"></a>获取key放到站点配置文件里面（不是主题的配置文件）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">algolia:</span><br><span class="line">  applicationID: <span class="string">'applicationID'</span></span><br><span class="line">  apiKey: <span class="string">'apiKey-seach-only'</span></span><br><span class="line">  indexName: <span class="string">'indexName'</span></span><br><span class="line">  chunkSize: 5000</span><br></pre></td></tr></table></figure><blockquote><p>所有的key都在如下界面获取<br><img src="http://qn.zhouyajun.cn/algolia_2.png" alt="keys"></p></blockquote><h5 id="安装hexo-algolia扩展"><a href="#安装hexo-algolia扩展" class="headerlink" title="安装hexo-algolia扩展"></a>安装hexo-algolia扩展</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-algolia</span><br></pre></td></tr></table></figure><blockquote><p><em>注意</em> theam 5.1版本以后要使用如下命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-algolia@0.2.0</span><br></pre></td></tr></table></figure><h5 id="更新index-在项目目录下"><a href="#更新index-在项目目录下" class="headerlink" title="更新index(在项目目录下)"></a>更新index(在项目目录下)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo algolia</span><br></pre></td></tr></table></figure><h5 id="项目集成"><a href="#项目集成" class="headerlink" title="项目集成"></a>项目集成</h5><blockquote><p>更改主题配置文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Algolia Search</span></span><br><span class="line">algolia_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  hits:</span><br><span class="line">    per_page: 10</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search <span class="keyword">for</span> Posts</span><br><span class="line">    hits_empty: <span class="string">"We didn't find any results for the search: <span class="variable">$&#123;query&#125;</span>"</span></span><br><span class="line">    hits_stats: <span class="string">"<span class="variable">$&#123;hits&#125;</span> results found in <span class="variable">$&#123;time&#125;</span> ms"</span></span><br></pre></td></tr></table></figure><blockquote><p>将 <code>enable</code> 改为 <code>true</code> 即可，根据需要你可以调整 labels 中的文本。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;注册algolia&quot;&gt;&lt;a href=&quot;#注册algolia&quot; class=&quot;headerlink&quot; title=&quot;注册algolia&quot;&gt;&lt;/a&gt;注册algolia&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.algolia.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;algolia官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;可以使用github 和谷歌账号 直接登录（直接跳过新手引导）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;新建index&quot;&gt;&lt;a href=&quot;#新建index&quot; class=&quot;headerlink&quot; title=&quot;新建index&quot;&gt;&lt;/a&gt;新建index&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;http://qn.zhouyajun.cn/algolia_1.png&quot; alt=&quot;新建index&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://blog.zhouyajun.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://blog.zhouyajun.cn/tags/hexo/"/>
    
      <category term="博客" scheme="http://blog.zhouyajun.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="algolia" scheme="http://blog.zhouyajun.cn/tags/algolia/"/>
    
  </entry>
  
  <entry>
    <title>hexo部署github pages</title>
    <link href="http://blog.zhouyajun.cn/2019/06/04/hexo%E9%83%A8%E7%BD%B2github-pages/"/>
    <id>http://blog.zhouyajun.cn/2019/06/04/hexo部署github-pages/</id>
    <published>2019-06-04T03:31:43.633Z</published>
    <updated>2019-06-04T03:31:43.633Z</updated>
    
    <content type="html"><![CDATA[<h5 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h5><blockquote><p>这里不多做解释,附上github地址：<a href="https://github.com/" target="_blank" rel="noopener">github</a></p></blockquote><h5 id="创建github-page-仓库"><a href="#创建github-page-仓库" class="headerlink" title="创建github page 仓库"></a>创建github page 仓库</h5><blockquote><p>建个github库。名字必须是   yourname.github.io</p></blockquote><blockquote><p>yourname  就是你的github的用户名 例如：zhouyajun.github.io</p></blockquote><a id="more"></a><h5 id="在本机生成ssh-key"><a href="#在本机生成ssh-key" class="headerlink" title="在本机生成ssh key"></a>在本机生成ssh key</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"你的邮箱地址"</span></span><br><span class="line">一路回车 enter</span><br></pre></td></tr></table></figure><blockquote><p>生成的key一般位于C:\Users\Administrator.ssh文件夹中</p></blockquote><blockquote><p>找到.id_rsa.pub文件,打开，并复制其中内容</p></blockquote><blockquote><p>登录github,找到setting-&gt;ssh GPG keys页面，添加sshkey</p></blockquote><p><img src="/img/git_ssh_key.png" alt="添加ssh_key界面"></p><blockquote><p>用你刚刚复制的is_rsa.pub里面的内容复制到github add ssh key页面中</p></blockquote><p><img src="/img/add_ssh_key.png" alt="添加ssh_key界面"></p><blockquote><p>至此，ssh秘钥配置完成</p></blockquote><h5 id="配置hexo项目中的自动部署"><a href="#配置hexo项目中的自动部署" class="headerlink" title="配置hexo项目中的自动部署"></a>配置hexo项目中的自动部署</h5><blockquote><p>打开 _config.yml文件 ,找到并修改如下代码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:zhouyajun/zhouyajun.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><blockquote><p><code>注：type:HEXO更新到3.0之后，deploy的type 的github需要改成git</code></p></blockquote><blockquote><p>必须事先安装hexo-deplorer-git扩展,否则会报 <em>ERROR Deployer not found: git 的错误</em></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>配置完成</p></blockquote><h5 id="执行部署"><a href="#执行部署" class="headerlink" title="执行部署"></a>执行部署</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;注册github&quot;&gt;&lt;a href=&quot;#注册github&quot; class=&quot;headerlink&quot; title=&quot;注册github&quot;&gt;&lt;/a&gt;注册github&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;这里不多做解释,附上github地址：&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;创建github-page-仓库&quot;&gt;&lt;a href=&quot;#创建github-page-仓库&quot; class=&quot;headerlink&quot; title=&quot;创建github page 仓库&quot;&gt;&lt;/a&gt;创建github page 仓库&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;建个github库。名字必须是   yourname.github.io&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;yourname  就是你的github的用户名 例如：zhouyajun.github.io&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://blog.zhouyajun.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://blog.zhouyajun.cn/tags/hexo/"/>
    
      <category term="博客" scheme="http://blog.zhouyajun.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>apidoc详解</title>
    <link href="http://blog.zhouyajun.cn/2019/06/04/apidoc%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.zhouyajun.cn/2019/06/04/apidoc详解/</id>
    <published>2019-06-04T03:31:43.632Z</published>
    <updated>2019-06-04T03:31:43.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ApiDoc使用详解"><a href="#ApiDoc使用详解" class="headerlink" title="ApiDoc使用详解"></a>ApiDoc使用详解</h3><h4 id="参考项目文档：apidoc官方文档"><a href="#参考项目文档：apidoc官方文档" class="headerlink" title="参考项目文档：apidoc官方文档"></a>参考项目文档：<a href="http://apidocjs.com/" target="_blank" rel="noopener">apidoc官方文档</a></h4><p><strong>1. 安装apidoc</strong></p><blockquote><p>注意：首先要安装<code>npm</code>网上搜索<br>安装命令：<code>npm install apidoc -g</code></p></blockquote><p><strong>2.安装grunt module</strong><br><code>npm install grunt-apidoc --save-dev</code></p><p> <strong>3.配置apidoc.json或者package.json文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"项目名称"</span>,</span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"版本号"</span>,</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"项目描述"</span>,</span><br><span class="line"><span class="attr">"title"</span>:<span class="string">"浏览器网页标题"</span>,</span><br><span class="line"><span class="attr">"url"</span>:<span class="string">"请求的路径前面的服务器地址"</span>,</span><br><span class="line"><span class="attr">"sampleUrl"</span>:<span class="string">"模拟请求的地址"</span>（如果设置，所有接口都会有个模拟请求的界面）,</span><br><span class="line">"header": &#123;//没试过</span><br><span class="line">    "title": "My own header title",</span><br><span class="line">    "filename": "header.md"</span><br><span class="line">&#125;,</span><br><span class="line">   "footer": &#123;</span><br><span class="line">    "title": "My own footer title",</span><br><span class="line">    "filename": "footer.md"</span><br><span class="line">   &#125;,</span><br><span class="line">   "order":&#123;</span><br><span class="line">   //排序，没试过</span><br><span class="line"> &#125;,</span><br><span class="line">   "template":&#123;</span><br><span class="line">   "forceLanguage":"zh_cn",//语言</span><br><span class="line">   "withCompare":true //是否开启比较版本功能（默认true）,</span><br><span class="line">   "withGenerator":true //是否开启生成信息在页脚（默认true）,</span><br><span class="line">   "jQueryAjaxSetup":object //ajax请求（未尝试）</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.apidoc接口文档参数详解</strong></p><ul><li><p><code>@api {method} /path/to/:uid [title]</code>  </p><blockquote><p>注：定义接口名，请求方式,路径（必填，除了apiDefine）</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @api &#123;post&#125; /user/reg 用户注册</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li><li><p><code>@apiDefine name [title]</code></p><blockquote><p>注：定义公共文档块，可使用apiUse在其他文档中插入</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @apiDefine MyError</span><br><span class="line"> * @apiError UserNotFound The &lt;code&gt;id&lt;/code&gt; of the User was not found.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @api &#123;get&#125; /user/:id</span><br><span class="line"> * @apiUse MyError</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li><li><p><code>@apiDescription text</code></p><blockquote><p>注：接口描述</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*@apiDescription 用户登录接口</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li><li><p><code>@apiName name</code></p><blockquote><p>注：接口名（必填，用户文档左侧菜单二级分类）</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*@apiName login</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li><li><p><code>@apiGroup group</code></p><blockquote><p>注：接口分组（必填，用户文档左侧菜单一级分类）</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*@apiGroup user</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li><li><p><code>@apiVersion 1.1.1</code></p><blockquote><p>注：接口版本号（必须是：major.minor.patch格式：1.0.0）</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*@apiVersion 1.0.0</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li><li><p><code>@apiDeprecated text</code></p><blockquote><p>注：未测试</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*@apiDeprecated text</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li><li><p><code>@apiIgnore [hint]</code></p><blockquote><p>注：忽略的接口[hint]为忽略的原因，可选</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*@apiIgnore hint</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li><li><p><code>@apiPermission  name</code></p><blockquote><p>注：api的权限名</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*@apiPermission admin</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li><li><p><code>@apiParam [(group)] [{type}] [field=defaultValue] [description]</code></p><blockquote><p>注：接口参数<br>{type}包括：{String} 字符串，{Boolean}布尔值, {Number}数字, {Object}对象, {String[]}字符串数组<br>[field] 可选参数field<br>field 必选参数 field<br>=’string’ 参数默认值<br>{type{size}} 代表字符长度{String{6-12}}<br>[description] 字段描述</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @api &#123;post&#125; /user/</span><br><span class="line"> * @apiParam &#123;String&#125; [firstname]  Optional Firstname of the User.</span><br><span class="line"> * @apiParam &#123;String&#125; lastname     Mandatory Lastname.</span><br><span class="line"> * @apiParam &#123;String&#125; country="DE" Mandatory with default value "DE".</span><br><span class="line"> * @apiParam &#123;Number&#125; [age=18]     Optional Age with default 18.</span><br><span class="line"> *</span><br><span class="line"> * @apiParam (Login) &#123;String&#125; pass Only logged in users can post this.</span><br><span class="line"> *                                 In generated documentation a separate</span><br><span class="line"> *                                 "Login" Block will be generated.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li><li><p><code>@apiSuccess [(group)] [{type}] field [description]</code></p><blockquote><p>注：接口返回值显示<br>{type}包括：{String} 字符串，{Boolean}布尔值, {Number}数字, {Object}对象, {String[]}字符串数组<br>field 返回字段名<br>[description] 字段描述</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @api &#123;get&#125; /user/:id</span><br><span class="line"> * @apiSuccess (200) &#123;String&#125; firstname Firstname of the User.</span><br><span class="line"> * @apiSuccess (200) &#123;String&#125; lastname  Lastname of the User.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li><li><p><code>@apiSuccessExample [{type}] [title] example</code></p><blockquote><p>注：接口返回值显示<br>{type}包括：{json}<br>title 返回说明：<br>[example] 返回例子</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @api &#123;get&#125; /user/:id</span><br><span class="line"> * @apiSuccessExample &#123;json&#125; Success-Response:</span><br><span class="line"> *     HTTP/1.1 200 OK</span><br><span class="line"> *     &#123;</span><br><span class="line"> *       "firstname": "John",</span><br><span class="line"> *       "lastname": "Doe"</span><br><span class="line"> *     &#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li></ul><p><strong>5.版本比较</strong></p><blockquote><p>要保留两份，后新的版本的时候。保留原来的版本说明，复制修改为新的版本，另外修改新的版本号</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * @api &#123;post&#125; /index/index 首页接口</span><br><span class="line">    * @apiVersion 1.1.0</span><br><span class="line">    * @apiDescription 首页获取数据</span><br><span class="line">    * @apiName index</span><br><span class="line">    * @apiGroup Index</span><br><span class="line">    *</span><br><span class="line">    * @apiUse token</span><br><span class="line">    * @apiParam &#123;string&#125; [page=1] 页数</span><br><span class="line">    * @apiParam &#123;string&#125; [limit=10] 每页条数</span><br><span class="line">    * @apiParam &#123;string&#125; [name] 搜索名</span><br><span class="line">    *</span><br><span class="line">    * @apiUse tokenError</span><br><span class="line">    *</span><br><span class="line">    * @apiSuccessExample &#123;json&#125; 成功返回：</span><br><span class="line">    * &#123;</span><br><span class="line">   "status": "1",</span><br><span class="line">   "code": "200",</span><br><span class="line">   "message": "成功",</span><br><span class="line">   "data": &#123;</span><br><span class="line">   "noticeList": [</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="attr">"pic"</span>: <span class="string">"http://xblj.oss-cn-hangzhou.aliyuncs.com/khw_server/user/1/credential/1498805411211761.png"</span>,</span><br><span class="line">   <span class="attr">"url"</span>: <span class="string">"http://www.local.com/xblj/khw/server/api/web/index.php/page/notice?id=6"</span>,</span><br><span class="line">   <span class="attr">"id"</span>: <span class="string">"6"</span></span><br><span class="line">   &#125;</span><br><span class="line">   ],</span><br><span class="line">   "courseList": [</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="attr">"type_name"</span>: <span class="string">"客运"</span>,</span><br><span class="line">   <span class="attr">"type"</span>: <span class="string">"1"</span>,</span><br><span class="line">   <span class="attr">"course_name"</span>: <span class="string">"测试"</span>,</span><br><span class="line">   <span class="attr">"price"</span>: <span class="string">"20.00"</span>,</span><br><span class="line">   <span class="attr">"cover_pic"</span>: <span class="string">"http://xblj.oss-cn-hangzhou.aliyuncs.com/khw_server/user/1/credential/1498805411211761.png"</span>,</span><br><span class="line">   <span class="attr">"buy_times"</span>: <span class="string">"10"</span>,</span><br><span class="line">   <span class="attr">"course_id"</span>: <span class="string">"1"</span></span><br><span class="line">   &#125;</span><br><span class="line">   ]</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * @api &#123;post&#125; /index/index 首页接口</span><br><span class="line">    * @apiVersion 1.2.0</span><br><span class="line">    * @apiDescription 首页获取数据</span><br><span class="line">    * @apiName index</span><br><span class="line">    * @apiGroup Index</span><br><span class="line">    *</span><br><span class="line">    * @apiUse token</span><br><span class="line">    * @apiParam &#123;string&#125; [page=1] 页数</span><br><span class="line">    * @apiParam &#123;string&#125; [limit=10] 每页条数</span><br><span class="line">    *</span><br><span class="line">    * @apiUse tokenError</span><br><span class="line">    *</span><br><span class="line">    *</span><br><span class="line">    * @apiSuccessExample &#123;json&#125; 成功返回：</span><br><span class="line">    * &#123;</span><br><span class="line">   "status": "1",</span><br><span class="line">   "code": "200",</span><br><span class="line">   "message": "成功",</span><br><span class="line">   "data": &#123;</span><br><span class="line">   "noticeList": [</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="attr">"pic"</span>: <span class="string">"http://xblj.oss-cn-hangzhou.aliyuncs.com/khw_server/user/1/credential/1498805411211761.png"</span>,</span><br><span class="line">   <span class="attr">"url"</span>: <span class="string">"http://www.local.com/xblj/khw/server/api/web/index.php/page/notice?id=6"</span>,</span><br><span class="line">   <span class="attr">"id"</span>: <span class="string">"6"</span></span><br><span class="line">   &#125;</span><br><span class="line">   ],</span><br><span class="line">   "courseList": [</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="attr">"type_name"</span>: <span class="string">"客运"</span>,</span><br><span class="line">   <span class="attr">"type"</span>: <span class="string">"1"</span>,</span><br><span class="line">   <span class="attr">"course_name"</span>: <span class="string">"测试"</span>,</span><br><span class="line">   <span class="attr">"price"</span>: <span class="string">"20.00"</span>,</span><br><span class="line">   <span class="attr">"cover_pic"</span>: <span class="string">"http://xblj.oss-cn-hangzhou.aliyuncs.com/khw_server/user/1/credential/1498805411211761.png"</span>,</span><br><span class="line">   <span class="attr">"buy_times"</span>: <span class="string">"10"</span>,</span><br><span class="line">   <span class="attr">"course_id"</span>: <span class="string">"1"</span></span><br><span class="line">   &#125;</span><br><span class="line">   ]</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    */</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ApiDoc使用详解&quot;&gt;&lt;a href=&quot;#ApiDoc使用详解&quot; class=&quot;headerlink&quot; title=&quot;ApiDoc使用详解&quot;&gt;&lt;/a&gt;ApiDoc使用详解&lt;/h3&gt;&lt;h4 id=&quot;参考项目文档：apidoc官方文档&quot;&gt;&lt;a href=&quot;#参考项目
      
    
    </summary>
    
      <category term="api" scheme="http://blog.zhouyajun.cn/categories/api/"/>
    
    
      <category term="api" scheme="http://blog.zhouyajun.cn/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github+hexo-theam-next个人博客</title>
    <link href="http://blog.zhouyajun.cn/2019/06/04/hexo-github-hexo-theam-next%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://blog.zhouyajun.cn/2019/06/04/hexo-github-hexo-theam-next个人博客/</id>
    <published>2019-06-04T03:31:43.632Z</published>
    <updated>2019-06-04T03:31:43.632Z</updated>
    
    <content type="html"><![CDATA[<h5 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@git.oschina.net:yajun0310/blog.git</span><br><span class="line">git <span class="built_in">clone</span> https://git.oschina.net/yajun0310/blog.git</span><br></pre></td></tr></table></figure><h5 id="安装npm依赖module"><a href="#安装npm依赖module" class="headerlink" title="安装npm依赖module"></a>安装npm依赖module</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>安装部署脚本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>安装rss扩展</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h5 id="执行hexo命令查看预览"><a href="#执行hexo命令查看预览" class="headerlink" title="执行hexo命令查看预览"></a>执行hexo命令查看预览</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s -p 80</span><br></pre></td></tr></table></figure><h5 id="查看预览"><a href="#查看预览" class="headerlink" title="查看预览"></a>查看预览</h5><p>在浏览器中输入<code>localhost</code><img src="/img/1.png" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;源码下载&quot;&gt;&lt;a href=&quot;#源码下载&quot; class=&quot;headerlink&quot; title=&quot;源码下载&quot;&gt;&lt;/a&gt;源码下载&lt;/h5&gt; &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; git@git.oschina.net:yajun0310/blog.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://git.oschina.net/yajun0310/blog.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;安装npm依赖module&quot;&gt;&lt;a href=&quot;#安装npm依赖module&quot; class=&quot;headerlink&quot; title=&quot;安装npm依赖module&quot;&gt;&lt;/a&gt;安装npm依赖module&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; blog&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://blog.zhouyajun.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://blog.zhouyajun.cn/tags/hexo/"/>
    
      <category term="博客" scheme="http://blog.zhouyajun.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="theam-next" scheme="http://blog.zhouyajun.cn/tags/theam-next/"/>
    
      <category term="next" scheme="http://blog.zhouyajun.cn/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>array_merge() 函数详解</title>
    <link href="http://blog.zhouyajun.cn/2019/06/04/2016-6-27-array-merge/"/>
    <id>http://blog.zhouyajun.cn/2019/06/04/2016-6-27-array-merge/</id>
    <published>2019-06-04T03:31:43.628Z</published>
    <updated>2019-06-04T03:31:43.628Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> $a = [</span><br><span class="line">   <span class="string">'a'</span>=&gt;<span class="string">'abc'</span>,</span><br><span class="line">   <span class="string">'b'</span>=&gt;<span class="string">'ccc'</span>,</span><br><span class="line">   <span class="string">'c'</span>=&gt;<span class="string">'ddd'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$b = [</span><br><span class="line">   <span class="string">'a'</span>=&gt;<span class="string">'122'</span>,</span><br><span class="line">   <span class="string">'b'</span>=&gt;<span class="string">'333'</span>,</span><br><span class="line">   <span class="string">'d'</span>=&gt;<span class="string">'ddd'</span></span><br><span class="line"> ];</span><br><span class="line"> </span><br><span class="line"> $c = array_merge($a,$b);</span><br><span class="line"> </span><br><span class="line"> var_dump($c);</span><br></pre></td></tr></table></figure><p><strong>很显然，关联数组会根据键名合并，若数组键名相同，第二个数组合并第一个，返回如下</strong></p> <a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">array</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  [<span class="string">"a"</span>]=&gt;</span><br><span class="line">  string(<span class="number">3</span>) <span class="string">"122"</span></span><br><span class="line">  [<span class="string">"b"</span>]=&gt;</span><br><span class="line">  string(<span class="number">3</span>) <span class="string">"333"</span></span><br><span class="line">  [<span class="string">"c"</span>]=&gt;</span><br><span class="line">  string(<span class="number">3</span>) <span class="string">"ddd"</span></span><br><span class="line">  [<span class="string">"d"</span>]=&gt;</span><br><span class="line">  string(<span class="number">3</span>) <span class="string">"ddd"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="索引数组"><a href="#索引数组" class="headerlink" title="索引数组"></a>索引数组</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> $a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line">$b = [<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</span><br><span class="line"> </span><br><span class="line"> $c = array_merge($a,$b);</span><br><span class="line"> </span><br><span class="line"> var_dump($c);</span><br></pre></td></tr></table></figure><p><strong>索引数组是完全合并两个数组</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">6</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  string(<span class="number">1</span>) <span class="string">"a"</span></span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  string(<span class="number">1</span>) <span class="string">"b"</span></span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  string(<span class="number">1</span>) <span class="string">"c"</span></span><br><span class="line">  [<span class="number">3</span>]=&gt;</span><br><span class="line">  string(<span class="number">1</span>) <span class="string">"b"</span></span><br><span class="line">  [<span class="number">4</span>]=&gt;</span><br><span class="line">  string(<span class="number">1</span>) <span class="string">"c"</span></span><br><span class="line">  [<span class="number">5</span>]=&gt;</span><br><span class="line">  string(<span class="number">1</span>) <span class="string">"d"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;关联数组&quot;&gt;&lt;a href=&quot;#关联数组&quot; class=&quot;headerlink&quot; title=&quot;关联数组&quot;&gt;&lt;/a&gt;关联数组&lt;/h4&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; $a = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;ccc&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;ddd&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$b = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;122&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;333&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;ddd&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; $c = array_merge($a,$b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; var_dump($c);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;很显然，关联数组会根据键名合并，若数组键名相同，第二个数组合并第一个，返回如下&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://blog.zhouyajun.cn/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.zhouyajun.cn/tags/php/"/>
    
      <category term="函数" scheme="http://blog.zhouyajun.cn/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>mysql用户远程登录</title>
    <link href="http://blog.zhouyajun.cn/2019/06/04/2016-7-5-myaql-1/"/>
    <id>http://blog.zhouyajun.cn/2019/06/04/2016-7-5-myaql-1/</id>
    <published>2019-06-04T03:31:43.628Z</published>
    <updated>2019-06-04T03:31:43.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">command <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">grant (all privileges) </span><br><span class="line">on database.table </span><br><span class="line">to username@<span class="string">'ip'</span> </span><br><span class="line">idenitfied by <span class="string">'password'</span> </span><br><span class="line">with grant option;</span><br><span class="line"></span><br><span class="line">command <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>all privileges 可以替换为相应的权限 比如：select,update,insert</p></blockquote><blockquote><p>username 为mysql 用户名</p></blockquote><blockquote><p>ip 为可以远程访问的ip,%代表所有地址都可以访问</p></blockquote><blockquote><p>password 为 密码</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;command &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grant (all privileges) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;on database.table &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;to username@&lt;span class=&quot;string&quot;&gt;&#39;ip&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;idenitfied by &lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;with grant option;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;command &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flush privileges;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://blog.zhouyajun.cn/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://blog.zhouyajun.cn/tags/mysql/"/>
    
      <category term="方法" scheme="http://blog.zhouyajun.cn/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>php 设计模式(单例模式)</title>
    <link href="http://blog.zhouyajun.cn/2019/06/04/2016-6-27-php%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.zhouyajun.cn/2019/06/04/2016-6-27-php设计模式/</id>
    <published>2019-06-04T03:31:43.628Z</published>
    <updated>2019-06-04T03:31:43.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生成对象"><a href="#生成对象" class="headerlink" title="生成对象"></a>生成对象</h2><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><pre><code>- 系统中只能有一个对象- 该对象可以被所有其他对象调用- 该对象不能存储到可改变的全局变量中</code></pre><a id="more"></a><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by ZYJ.</span></span><br><span class="line"><span class="comment"> * User: ZYJ</span></span><br><span class="line"><span class="comment"> * Date: 2016/10/14</span></span><br><span class="line"><span class="comment"> * Time: 11:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">study</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $pro = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'无法克隆'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $pro</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPro</span><span class="params">( $key, $val )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pro[$key] = $val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPro</span><span class="params">( $key )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;pro[$key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例模式生成对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Singleton</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">self</span>::$instance)) &#123;</span><br><span class="line">            <span class="keyword">self</span>::$instance = <span class="keyword">new</span> <span class="keyword">self</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生成对象&quot;&gt;&lt;a href=&quot;#生成对象&quot; class=&quot;headerlink&quot; title=&quot;生成对象&quot;&gt;&lt;/a&gt;生成对象&lt;/h2&gt;&lt;h4 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;- 系统中只能有一个对象
- 该对象可以被所有其他对象调用
- 该对象不能存储到可改变的全局变量中&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="php" scheme="http://blog.zhouyajun.cn/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.zhouyajun.cn/tags/php/"/>
    
      <category term="设计模式" scheme="http://blog.zhouyajun.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>go操作mysql数据库</title>
    <link href="http://blog.zhouyajun.cn/2018/08/27/go%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://blog.zhouyajun.cn/2018/08/27/go操作mysql数据库/</id>
    <published>2018-08-27T03:54:12.000Z</published>
    <updated>2019-06-04T03:31:43.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="go操作mysql数据库"><a href="#go操作mysql数据库" class="headerlink" title="go操作mysql数据库"></a>go操作mysql数据库</h3><h4 id="示例数据库结构"><a href="#示例数据库结构" class="headerlink" title="示例数据库结构"></a>示例数据库结构</h4><p>数据库test，用户表userinfo，关联用户信息表userdetail</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`userinfo`</span> (</span><br><span class="line"><span class="string">`uid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="string">`username`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`department`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`created`</span> <span class="built_in">DATE</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`uid`</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`userdetail`</span> (</span><br><span class="line"><span class="string">`uid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line"><span class="string">`intro`</span> <span class="built_in">TEXT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`profile`</span> <span class="built_in">TEXT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`uid`</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h4><h5 id="1-引入库文件"><a href="#1-引入库文件" class="headerlink" title="1  引入库文件"></a>1  引入库文件</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"database/sql"</span></span><br><span class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="2-连接数据库"><a href="#2-连接数据库" class="headerlink" title="2 连接数据库"></a>2 连接数据库</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//host 数据库地址</span></span><br><span class="line"><span class="comment">//port mysql端口</span></span><br><span class="line"><span class="comment">//database 连接的数据库</span></span><br><span class="line">db,err := sql.open(<span class="string">"mysql"</span>,<span class="string">"用户名：密码@tcp(host:port)/database"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"> <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭数据库</span></span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br></pre></td></tr></table></figure><h5 id="3-插入数据"><a href="#3-插入数据" class="headerlink" title="3 插入数据"></a>3 插入数据</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入语句预处理</span></span><br><span class="line">stmt,err := db.Prepare(<span class="string">"INSERT userinfo set username=?,department=?,created_at=?"</span>)</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">res,err := stmt.Exec(<span class="string">"test"</span>,<span class="string">"销售部门"</span>,<span class="string">"2018-05-10"</span>)</span><br><span class="line"><span class="comment">//获取上次插入的id</span></span><br><span class="line">id,err := res.lastInsertId()</span><br></pre></td></tr></table></figure><h4 id="4-查询数据"><a href="#4-查询数据" class="headerlink" title="4 查询数据"></a>4 查询数据</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数据库的所有字段</span></span><br><span class="line">res,err := db.Query(<span class="string">"select * from userinfo"</span>)</span><br><span class="line">res.Columns()</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取单挑数据</span></span><br><span class="line">res := db.QueryRow(<span class="string">"select * from userinfo"</span>)</span><br><span class="line">res.scan(&amp;uid,&amp;username,&amp;department,&amp;created_at)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取多条数据结果</span></span><br><span class="line">stmt,err := db.Prepare(<span class="string">"select * from userinfo where uid=?"</span>)</span><br><span class="line">res,err := stmt.Query(<span class="number">1</span>)</span><br><span class="line"><span class="comment">//循环获取单挑数据</span></span><br><span class="line"><span class="keyword">for</span> res.Next()&#123;</span><br><span class="line">res.scan(&amp;uid,&amp;username,&amp;department,&amp;created_at)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-修改数据"><a href="#5-修改数据" class="headerlink" title="5 修改数据"></a>5 修改数据</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stmt,_ := db.Prepare(<span class="string">"update userinfo set username=? where id = ?"</span>)</span><br><span class="line">res,_ := stmt.Exec(<span class="string">"test"</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">//受影响的行数</span></span><br><span class="line">res.RowsAffected()</span><br></pre></td></tr></table></figure><h4 id="6-删除数据"><a href="#6-删除数据" class="headerlink" title="6 删除数据"></a>6 删除数据</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stmt,_ := db.Prepare(<span class="string">"Delete from userinfo where uid=?"</span>)</span><br><span class="line">res,_ := stmt.Exec(<span class="number">1</span>)</span><br><span class="line">res.RowsAffected()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;go操作mysql数据库&quot;&gt;&lt;a href=&quot;#go操作mysql数据库&quot; class=&quot;headerlink&quot; title=&quot;go操作mysql数据库&quot;&gt;&lt;/a&gt;go操作mysql数据库&lt;/h3&gt;&lt;h4 id=&quot;示例数据库结构&quot;&gt;&lt;a href=&quot;#示例数据库结
      
    
    </summary>
    
      <category term="go" scheme="http://blog.zhouyajun.cn/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.zhouyajun.cn/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go语言学习之并发</title>
    <link href="http://blog.zhouyajun.cn/2018/08/11/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%B9%B6%E5%8F%91/"/>
    <id>http://blog.zhouyajun.cn/2018/08/11/go语言学习之并发/</id>
    <published>2018-08-11T14:15:09.000Z</published>
    <updated>2019-06-04T03:31:43.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="go-并发"><a href="#go-并发" class="headerlink" title="go 并发"></a>go 并发</h3><h4 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h4><ol><li>goroutine是Go并行设计的核心。goroutine说到底其实就是协程，但是它比线程更小</li><li>Go语言内部帮你实现了这些goroutine之间的内存共享</li><li>执行goroutine只需极少的栈内存(大概是4~5KB)，当然会根据相应的数据伸缩。也正因为如此，可同时运行成千上万个并发任务</li><li>goroutine比thread更易用、更高效、更轻便</li><li>goroutine是通过Go的runtime管理的一个线程管理器。goroutine通过go关键字实现了，其实就是一个普通的函数。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> hello(a,b,c)</span><br></pre></td></tr></table></figure></li></ol><h4 id="channels"><a href="#channels" class="headerlink" title="channels"></a>channels</h4><p>定义一个channel时，也需要定义发送到channel的值的类型,<br><strong>注意：</strong>必须使用make 创建channel<br>channel通过操作符&lt;-来接收和发送数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="comment">//存入数据</span></span><br><span class="line">c &lt;- <span class="string">'abc'</span></span><br><span class="line"><span class="comment">//取出数据</span></span><br><span class="line">value := &lt;-c</span><br></pre></td></tr></table></figure><p>默认情况下，channel接收和发送数据都是阻塞的</p><h4 id="buffered-channels-带缓冲的channels"><a href="#buffered-channels-带缓冲的channels" class="headerlink" title="buffered channels (带缓冲的channels)"></a>buffered channels (带缓冲的channels)</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">type</span>,value)</span><br><span class="line"><span class="comment">//创建带有4个缓冲的线程</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">type</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>range (使用range方法读取channels里面的数据)</li><li>close() 关闭channel，应该在生产者</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">x, y := <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">c &lt;- x</span><br><span class="line">x, y = y, x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">go</span> fibonacci(<span class="built_in">cap</span>(c), c)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="select-switch切换channel"><a href="#select-switch切换channel" class="headerlink" title="select (switch切换channel)"></a>select (switch切换channel)</h4><p>select默认是阻塞的，只有当监听的channel中有发送或接收可以进行时才会运行，当多个channel都准备好的时候，select是随机的选择一个执行的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(c, quit <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">x, y := <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> c &lt;- x:</span><br><span class="line">x, y = y, x + y</span><br><span class="line"><span class="keyword">case</span> &lt;-quit:</span><br><span class="line">fmt.Println(<span class="string">"quit"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(&lt;-c)</span><br><span class="line">&#125;</span><br><span class="line">quit &lt;- <span class="number">0</span></span><br><span class="line">&#125;()</span><br><span class="line">fibonacci(c, quit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="select设置超时"><a href="#select设置超时" class="headerlink" title="select设置超时"></a>select设置超时</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">o := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> v := &lt;- c:</span><br><span class="line"><span class="built_in">println</span>(v)</span><br><span class="line"><span class="keyword">case</span> &lt;- time.After(<span class="number">5</span> * time.Second):</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"timeout"</span>)</span><br><span class="line">o &lt;- <span class="literal">true</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&lt;- o</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="runtime-gotoutine"><a href="#runtime-gotoutine" class="headerlink" title="runtime gotoutine"></a>runtime gotoutine</h4><h5 id="runtime包中有几个处理goroutine的函数："><a href="#runtime包中有几个处理goroutine的函数：" class="headerlink" title="runtime包中有几个处理goroutine的函数："></a>runtime包中有几个处理goroutine的函数：</h5><ul><li>Goexit</li></ul><p>退出当前执行的goroutine，但是defer函数还会继续调用</p><ul><li>Gosched</li></ul><p>让出当前goroutine的执行权限，调度器安排其他等待的任务运行，并在下次某个时候从该位置恢复执行。</p><ul><li>NumCPU</li></ul><p>返回 CPU 核数量</p><ul><li>NumGoroutine</li></ul><p>返回正在执行和排队的任务总数</p><ul><li>GOMAXPROCS</li></ul><p>用来设置可以并行计算的CPU核数的最大值，并返回之前的值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;go-并发&quot;&gt;&lt;a href=&quot;#go-并发&quot; class=&quot;headerlink&quot; title=&quot;go 并发&quot;&gt;&lt;/a&gt;go 并发&lt;/h3&gt;&lt;h4 id=&quot;goroutine&quot;&gt;&lt;a href=&quot;#goroutine&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="go" scheme="http://blog.zhouyajun.cn/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.zhouyajun.cn/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go基础巩固</title>
    <link href="http://blog.zhouyajun.cn/2018/08/09/go%E5%9F%BA%E7%A1%80%E5%B7%A9%E5%9B%BA/"/>
    <id>http://blog.zhouyajun.cn/2018/08/09/go基础巩固/</id>
    <published>2018-08-09T02:58:16.000Z</published>
    <updated>2019-06-04T03:31:43.631Z</updated>
    
    <content type="html"><![CDATA[<h3 id="go基础巩固"><a href="#go基础巩固" class="headerlink" title="go基础巩固"></a>go基础巩固</h3><h4 id="（下划线）"><a href="#（下划线）" class="headerlink" title="_（下划线）"></a>_（下划线）</h4><p>下划线是一个特殊的变量名，任何赋予它的值都会被丢弃</p><h4 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h4><p>Go里面有一个关键字<code>iota</code>，这个关键字用来声明enum的时候采用，它默认开始值是0，const中每增加一行加1</p><h4 id="make-new操作符"><a href="#make-new操作符" class="headerlink" title="make,new操作符"></a>make,new操作符</h4><p>内建函数new本质上说跟其它语言中的同名函数功能一样：new(T)分配了零值填充的T类型的内存空间，并且返回其地址，即一个*T类型的值。用Go的术语说，它返回了一个指针，指向新分配的类型T的零值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">new</span>  返回指针</span><br></pre></td></tr></table></figure><p>内建函数make(T, args)与new(T)有着不同的功能，make只能创建slice、map和channel，并且返回一个有初始值(非零)的T类型，而不是*T。本质来讲，导致这三个类型有所不同的原因是指向数据结构的引用在使用前必须被初始化。例如，一个slice，是一个包含指向数据（内部array）的指针、长度和容量的三项描述符；在这些项目被初始化之前，slice为nil。对于slice、map和channel来说，make初始化了内部的数据结构，填充适当的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>返回初始化后的（非零）值。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h4><p>用<code>goto</code>跳转到必须在当前函数内定义的标签<br>标签：这行的第一个词，以冒号结束作为标签，标签大小写敏感</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">a := <span class="number">1</span></span><br><span class="line">HERE:</span><br><span class="line"><span class="built_in">println</span>(i)</span><br><span class="line">a++</span><br><span class="line"><span class="keyword">goto</span> HERE</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p>go的switch-case结构里面。默认带有break</p><h4 id="fallthrough"><a href="#fallthrough" class="headerlink" title="fallthrough"></a>fallthrough</h4><p>switch-case ，找到匹配的case值后，默认会跳出结构，<code>fallthrough</code> 关键字 可以强制执行后面的case代码</p><h4 id="Go函数支持变参"><a href="#Go函数支持变参" class="headerlink" title="Go函数支持变参"></a>Go函数支持变参</h4><p>接受变参的函数是有着不定数量的参数,示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(arg ...<span class="keyword">int</span>)</span><span class="params">(x,y <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">// arg 是一个slice结构</span></span><br><span class="line"><span class="keyword">for</span> i,v := <span class="keyword">range</span> arg&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p>Go语言中有种不错的设计，即延迟（defer）语句，你可以在函数中添加多个defer语句。当函数执行到最后时，这些defer语句会按照逆序执行，最后该函数返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadWrite</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">file.Open(<span class="string">"file"</span>)</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"><span class="keyword">if</span> failureX &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> failureY &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="main-函数和init-函数"><a href="#main-函数和init-函数" class="headerlink" title="main()函数和init()函数"></a>main()函数和init()函数</h4><p>Go里面有两个保留的函数：init函数（能够应用于所有的package）和main函数（只能应用于package main）<br>这两个函数在定义时不能有任何的参数和返回值<br>虽然一个package里面可以写任意多个init函数，但这无论是对于可读性还是以后的可维护性来说，我们都强烈建议用户在一个package中每个文件只写一个init函数<br>Go程序会自动调用init()和main()，所以你不需要在任何地方调用这两个函数<br>每个package中的init函数都是可选的，但package main就必须包含一个main函数<br><strong>注意:</strong> main包中，如果既有init()函数也有main函数，会先执行init()函数</p><h4 id="import-导入包的几种特殊写法"><a href="#import-导入包的几种特殊写法" class="headerlink" title="import 导入包的几种特殊写法"></a>import 导入包的几种特殊写法</h4><ol><li><p><code>.</code>导入<br>包名前面加点，可以在使用包里面函数的时候，忽略包名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">.<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//不加点使用</span></span><br><span class="line">fmt.Println()</span><br><span class="line"><span class="comment">//加点使用</span></span><br><span class="line">Println()</span><br></pre></td></tr></table></figure></li><li><p>别名操作<br>顾名思义，就是可以给包起个别名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">f <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">f.Println()</span><br></pre></td></tr></table></figure></li><li><p>_操作<br>带<code>_</code>的操作，实质不是引入包的函数，而是执行包的<code>init()</code>函数</p></li></ol><h4 id="结构体（自定义类型）"><a href="#结构体（自定义类型）" class="headerlink" title="结构体（自定义类型）"></a>结构体（自定义类型）</h4><h5 id="匿名字段（嵌入字段）"><a href="#匿名字段（嵌入字段）" class="headerlink" title="匿名字段（嵌入字段）"></a>匿名字段（嵌入字段）</h5><p>当匿名字段是一个struct的时候，那么这个struct所拥有的全部字段都被隐式地引入了当前定义的这个struct<br><strong>这里有一个问题：如果human里面有一个字段叫做phone，而student也有一个字段叫做phone，那么该怎么办呢？</strong><br><code>Go里面很简单的解决了这个问题，最外层的优先访问，也就是当你通过student.phone访问的时候，是访问student里面的字段，而不是human里面的字段。</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h4><p>简单的说，interface是一组method签名的组合，我们通过interface来定义对象的一组行为<br>interface可以被任意的对象实现<br>一个对象可以实现任意多个interface<br><strong>任意的类型都实现了空interface(我们这样定义：interface{})，也就是包含0个method的interface</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="keyword">string</span> </span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span>&#123;</span><br><span class="line">User</span><br><span class="line">lesson <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span>&#123;</span><br><span class="line">User</span><br><span class="line">teach_card <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(user User)</span> <span class="title">sing</span><span class="params">(a <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(user User)</span> <span class="title">sayHi</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Men <span class="keyword">interface</span>&#123;</span><br><span class="line">sing(a <span class="keyword">string</span>)</span><br><span class="line">sayHi()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>一个函数把interface{}作为参数，那么他可以接受任意类型的值作为参数，如果一个函数返回interface{},那么也就可以返回任意类型的值</p><h4 id="嵌入interface"><a href="#嵌入interface" class="headerlink" title="嵌入interface"></a>嵌入interface</h4><p>跟嵌入struct字段一样，interface也可以嵌入interface<br>嵌入其他interface,该interface就会拥有其他interface的所有方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> a <span class="keyword">interface</span>&#123;</span><br><span class="line">a()</span><br><span class="line">b()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> b <span class="keyword">interface</span>&#123;</span><br><span class="line">a</span><br><span class="line">c()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p>Go语言实现了反射，所谓反射就是能检查程序在运行时的状态</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;go基础巩固&quot;&gt;&lt;a href=&quot;#go基础巩固&quot; class=&quot;headerlink&quot; title=&quot;go基础巩固&quot;&gt;&lt;/a&gt;go基础巩固&lt;/h3&gt;&lt;h4 id=&quot;（下划线）&quot;&gt;&lt;a href=&quot;#（下划线）&quot; class=&quot;headerlink&quot; title=&quot;_（下划线）&quot;&gt;&lt;/a&gt;_（下划线）&lt;/h4&gt;&lt;p&gt;下划线是一个特殊的变量名，任何赋予它的值都会被丢弃&lt;/p&gt;
&lt;h4 id=&quot;iota&quot;&gt;&lt;a href=&quot;#iota&quot; class=&quot;headerlink&quot; title=&quot;iota&quot;&gt;&lt;/a&gt;iota&lt;/h4&gt;&lt;p&gt;Go里面有一个关键字&lt;code&gt;iota&lt;/code&gt;，这个关键字用来声明enum的时候采用，它默认开始值是0，const中每增加一行加1&lt;/p&gt;
&lt;h4 id=&quot;make-new操作符&quot;&gt;&lt;a href=&quot;#make-new操作符&quot; class=&quot;headerlink&quot; title=&quot;make,new操作符&quot;&gt;&lt;/a&gt;make,new操作符&lt;/h4&gt;&lt;p&gt;内建函数new本质上说跟其它语言中的同名函数功能一样：new(T)分配了零值填充的T类型的内存空间，并且返回其地址，即一个*T类型的值。用Go的术语说，它返回了一个指针，指向新分配的类型T的零值。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;  返回指针&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;内建函数make(T, args)与new(T)有着不同的功能，make只能创建slice、map和channel，并且返回一个有初始值(非零)的T类型，而不是*T。本质来讲，导致这三个类型有所不同的原因是指向数据结构的引用在使用前必须被初始化。例如，一个slice，是一个包含指向数据（内部array）的指针、长度和容量的三项描述符；在这些项目被初始化之前，slice为nil。对于slice、map和channel来说，make初始化了内部的数据结构，填充适当的值&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;返回初始化后的（非零）值。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.zhouyajun.cn/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.zhouyajun.cn/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go命令</title>
    <link href="http://blog.zhouyajun.cn/2018/08/08/go%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.zhouyajun.cn/2018/08/08/go命令/</id>
    <published>2018-08-08T06:11:51.000Z</published>
    <updated>2019-06-04T03:31:43.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GO-命令"><a href="#GO-命令" class="headerlink" title="GO 命令"></a>GO 命令</h2><h3 id="go-build"><a href="#go-build" class="headerlink" title="go build"></a>go build</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>这个命令主要用于编译代码。</p><ol><li>如果是普通包（不是main包） <code>go build</code> 命令不会生成任何文件</li><li>如果是main包，<code>go build</code>命令会在当前目录（执行命令的目录）生成二进制文件</li><li>如果某个项目文件夹下有多个文件，而你只想编译某个文件，就可在go build之后加上文件名，例如go build a.go；go build命令默认会编译当前目录下的所有go文件</li><li><code>go build</code>后面跟目录，是相对于GOPATH下的src目录，例如：<code>go build hello</code>,找的是$GOPATH/src/hello目录</li><li><code>go build</code> 不会递归编译，只会编译当前目录</li><li><code>go build</code>会忽略目录下以“_”或“.”开头的go文件<h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><code>-i</code>:编译同时安装相应的包= build +install<br><code>-o</code>:编译同时指定生成的文件名<br><code>-n</code>:把需要执行的编译命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的<br><code>-x</code>:打印出来执行的命令，其实就是和-n的结果类似，只是这个会执行<br><code>-v</code> 打印出来我们正在编译的包名<br><code>-compiler name</code> 指定相应的编译器，gccgo还是gc</li></ol><a id="more"></a><h3 id="go-clean"><a href="#go-clean" class="headerlink" title="go clean"></a>go clean</h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>这个命令是用来移除当前源码包和关联源码包里面编译生成的文件。</p><h4 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h4><p><code>-i</code> 清除关联的安装的包和可运行文件，也就是通过go install安装的文件<br><code>-n</code> 把需要执行的清除命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的<br><code>-r</code> 循环的清除在import中引入的包<br><code>-x</code> 打印出来执行的详细命令，其实就是-n打印的执行版本</p><h3 id="go-install"><a href="#go-install" class="headerlink" title="go install"></a>go install</h3><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><p>这个命令在内部实际上分成了两步操作：第一步是生成结果文件(可执行文件或者.a包)，第二步会把编译好的结果移到<code>$GOPATH/pkg</code>或者<code>$GOPATH/bin</code>中。</p><h4 id="常用参数-2"><a href="#常用参数-2" class="headerlink" title="常用参数"></a>常用参数</h4><p><code>-i</code>:编译同时安装相应的包= build +install<br><code>-o</code>:编译同时指定生成的文件名<br><code>-n</code>:把需要执行的编译命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的<br><code>-x</code>:打印出来执行的命令，其实就是和-n的结果类似，只是这个会执行<br><code>-v</code> 打印出来我们正在编译的包名<br><code>-compiler name</code> 指定相应的编译器，gccgo还是gc</p><h3 id="go-fmt"><a href="#go-fmt" class="headerlink" title="go fmt"></a>go fmt</h3><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><p>使用go fmt命令，其实是调用了gofmt，而且需要参数-w，否则格式化结果不会写入文件。<code>gofmt -w -l src</code>，可以格式化整个项目。</p><h4 id="gofmt参数说明"><a href="#gofmt参数说明" class="headerlink" title="gofmt参数说明"></a>gofmt参数说明</h4><p><code>-l</code> 显示那些需要格式化的文件<br><code>-w</code> 把改写后的内容直接写入到文件中，而不是作为结果打印到标准输出。<br><code>-r</code> 添加形如“a[b:len(a)] -&gt; a[b:]”的重写规则，方便我们做批量替换<br><code>-s</code> 简化文件中的代码<br><code>-d</code> 显示格式化前后的diff而不是写入文件，默认是false<br><code>-e</code> 打印所有的语法错误到标准输出。如果不使用此标记，则只会打印不同行的前10个错误。<br><code>-cpuprofile</code> 支持调试模式，写入相应的cpufile到指定的文件</p><h3 id="go-get"><a href="#go-get" class="headerlink" title="go get"></a>go get</h3><h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><p>这个命令是用来动态获取远程代码包的，目前支持的有<code>BitBucket</code>、<code>GitHub</code>、<code>Google Code</code>和<code>Launchpad</code>。这个命令在内部实际上分成了两步操作：第一步是<code>下载源码包</code>，第二步是执行<code>go install</code></p><p>####参数介绍：</p><p><code>-d</code> 只下载不安装<br><code>-f</code> 只有在你包含了-u参数的时候才有效，不让-u去验证import中的每一个都已经获取了，这对于本地fork的包特别有用<br><code>-fix</code> 在获取源码之后先运行fix，然后再去做其他的事情<br><code>-t</code> 同时也下载需要为运行测试所需要的包<br><code>-u</code>强制使用网络去更新包和它的依赖包<br><code>-v</code> 显示执行的命令</p><h3 id="godoc"><a href="#godoc" class="headerlink" title="godoc"></a>godoc</h3><p>####说明<br>在Go1.2版本之前还支持go doc命令，但是之后全部移到了godoc这个命令下，需要这样安装<code>go get golang.org/x/tools/cmd/godoc</code></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li><p>查看包里的函数列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">godoc net/http</span><br><span class="line">godoc fmt</span><br></pre></td></tr></table></figure></li><li><p>查看函数说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">godoc fmt Printf</span><br><span class="line">godoc fmt Sprintf</span><br></pre></td></tr></table></figure></li><li><p>使用本地在线文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">godoc -http=:8181</span><br></pre></td></tr></table></figure></li></ol><p>然后打开<code>127.0.0.1:8181</code>访问本地文档</p><h3 id="go-test"><a href="#go-test" class="headerlink" title="go test"></a>go test</h3><h4 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h4><p>执行这个命令，会自动读取源码目录下面名为<code>*_test.go</code>的文件，生成并运行测试用的可执行文件<br>默认的情况下，不需要任何的参数，它会自动把你源码包下面所有test文件测试完毕</p><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p><code>-bench regexp</code> 执行相应的benchmarks，例如 -bench=.<br><code>-cover</code> 开启测试覆盖率<br><code>-run regexp</code> 只运行regexp匹配的函数，例如 -run=Array 那么就执行包含有Array开头的函数<br><code>-v</code> 显示测试的详细命令</p><h3 id="go-generate"><a href="#go-generate" class="headerlink" title="go generate"></a>go generate</h3><h4 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h4><p>这个命令是从Go1.4开始才设计的，用于在编译前自动化生成某类代码。go generate和go build是完全不一样的命令，通过分析源码中特殊的注释，然后执行相应的命令。这些命令都是很明确的，没有任何的依赖在里面。而且大家在用这个之前心里面一定要有一个理念，这个go generate是给你用的，不是给使用你这个包的人用的，是方便你来生成一些代码的</p><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><p>这里我们来举一个简单的例子，例如我们经常会使用yacc来生成代码，那么我们常用这样的命令：</p><p><code>go tool yacc -o gopher.go -p parser gopher.y</code><br>-o 指定了输出的文件名， -p指定了package的名称，这是一个单独的命令，如果我们想让go generate来触发这个命令，那么就可以在当然目录的任意一个xxx.go文件里面的任意位置增加一行如下的注释：</p><p><code>//go:generate go tool yacc -o gopher.go -p parser gopher.y</code><br>这里我们注意了，<code>//go:generate</code>是没有任何空格的，这其实就是一个固定的格式，在扫描源码文件的时候就是根据这个来判断的。</p><p>所以我们可以通过如下的命令来生成，编译，测试。如果gopher.y文件有修改，那么就重新执行go generate重新生成文件就好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go generate</span><br><span class="line">go build</span><br><span class="line">go <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ol><li><code>go env</code> 查看当前go的环境变量</li><li><code>go version</code> 查看当前go版本</li><li><code>go list</code> 列出当前全部安装的package</li><li><code>go run</code>编译并运行Go程序</li><li><code>go help 命令</code> 获取命令帮助</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GO-命令&quot;&gt;&lt;a href=&quot;#GO-命令&quot; class=&quot;headerlink&quot; title=&quot;GO 命令&quot;&gt;&lt;/a&gt;GO 命令&lt;/h2&gt;&lt;h3 id=&quot;go-build&quot;&gt;&lt;a href=&quot;#go-build&quot; class=&quot;headerlink&quot; title=&quot;go build&quot;&gt;&lt;/a&gt;go build&lt;/h3&gt;&lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h4&gt;&lt;p&gt;这个命令主要用于编译代码。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果是普通包（不是main包） &lt;code&gt;go build&lt;/code&gt; 命令不会生成任何文件&lt;/li&gt;
&lt;li&gt;如果是main包，&lt;code&gt;go build&lt;/code&gt;命令会在当前目录（执行命令的目录）生成二进制文件&lt;/li&gt;
&lt;li&gt;如果某个项目文件夹下有多个文件，而你只想编译某个文件，就可在go build之后加上文件名，例如go build a.go；go build命令默认会编译当前目录下的所有go文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go build&lt;/code&gt;后面跟目录，是相对于GOPATH下的src目录，例如：&lt;code&gt;go build hello&lt;/code&gt;,找的是$GOPATH/src/hello目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go build&lt;/code&gt; 不会递归编译，只会编译当前目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go build&lt;/code&gt;会忽略目录下以“_”或“.”开头的go文件&lt;h4 id=&quot;常用参数&quot;&gt;&lt;a href=&quot;#常用参数&quot; class=&quot;headerlink&quot; title=&quot;常用参数&quot;&gt;&lt;/a&gt;常用参数&lt;/h4&gt;&lt;code&gt;-i&lt;/code&gt;:编译同时安装相应的包= build +install&lt;br&gt;&lt;code&gt;-o&lt;/code&gt;:编译同时指定生成的文件名&lt;br&gt;&lt;code&gt;-n&lt;/code&gt;:把需要执行的编译命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的&lt;br&gt;&lt;code&gt;-x&lt;/code&gt;:打印出来执行的命令，其实就是和-n的结果类似，只是这个会执行&lt;br&gt;&lt;code&gt;-v&lt;/code&gt; 打印出来我们正在编译的包名&lt;br&gt;&lt;code&gt;-compiler name&lt;/code&gt; 指定相应的编译器，gccgo还是gc&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.zhouyajun.cn/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.zhouyajun.cn/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go语言学习接口与方法</title>
    <link href="http://blog.zhouyajun.cn/2018/08/07/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.zhouyajun.cn/2018/08/07/go语言学习接口与方法/</id>
    <published>2018-08-07T14:03:01.000Z</published>
    <updated>2019-06-04T03:31:43.631Z</updated>
    
    <content type="html"><![CDATA[<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="Go-没有类。不过你可以为结构体类型定义方法。"><a href="#Go-没有类。不过你可以为结构体类型定义方法。" class="headerlink" title="Go 没有类。不过你可以为结构体类型定义方法。"></a>Go 没有类。不过你可以为结构体类型定义方法。</h5><p>方法就是一类带特殊的 接收者 参数的函数。<br>方法接收者在它自己的参数列表内，位于 func 关键字和方法名之间。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> v <span class="keyword">struct</span> &#123;</span><br><span class="line">x, y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(test v)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.x*v.x + v.y*v.y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">test := v&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">test.Abs()</span><br></pre></td></tr></table></figure><p><strong>记住：方法只是个带接收者参数的函数。</strong></p><h5 id="你也可以为非结构体类型声明方法。"><a href="#你也可以为非结构体类型声明方法。" class="headerlink" title="你也可以为非结构体类型声明方法。"></a>你也可以为非结构体类型声明方法。</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyFloat <span class="keyword">float64</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> f&lt;<span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(-f)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">f := MyFloat(-math.Sqrt2)</span><br><span class="line">f.Abs()</span><br></pre></td></tr></table></figure><h5 id="指针接收者"><a href="#指针接收者" class="headerlink" title="指针接收者"></a>指针接收者</h5><p>你可以为指针接收者声明方法。<br>这意味着对于某类型 T，接收者的类型可以用 *T 的文法。<br>指针接收者的方法可以修改接收者指向的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Scale</span><span class="params">(f <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">v.X = v.X * f</span><br><span class="line">v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(v.Abs())</span><br><span class="line">v.Scale(<span class="number">10</span>)</span><br><span class="line">fmt.Println(v.Abs())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><h5 id="方法与指针重定向"><a href="#方法与指针重定向" class="headerlink" title="方法与指针重定向"></a>方法与指针重定向</h5><p>带指针参数的函数必须接受一个指针<br>以指针为接收者的方法被调用时，接收者既能为值又能为指针</p><p>接受一个值作为参数的函数必须接受一个指定类型的值<br>而以值为接收者的方法被调用时，接收者既能为值又能为指针</p><h5 id="选择值或指针作为接收者"><a href="#选择值或指针作为接收者" class="headerlink" title="选择值或指针作为接收者"></a>选择值或指针作为接收者</h5><p>使用指针接收者的原因有二：</p><p>首先，方法能够修改其接收者指向的值。</p><p>其次，这样可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样做会更加高效</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>接口类型 是有一组方法签名定义的集合<br>接口类型的变量可以保存任何实现了这些方法的值</p><h5 id="接口与隐式实现"><a href="#接口与隐式实现" class="headerlink" title="接口与隐式实现"></a>接口与隐式实现</h5><p>类型通过实现一个接口的所有方法来实现该接口<br>隐式接口从接口的实现中解耦了定义，这样接口的实现可以出现在任何包中，无需提前准备<br>因此，也就无需在每一个实现上增加新的接口名称，这样同时也鼓励了明确的接口定义<br>在内部，接口值可以看做包含值和具体类型的元组：<br>(value, type)<br>接口值保存了一个具体底层类型的具体值<br>接口值调用方法时会执行其底层类型的同名方法</p><h5 id="底层值为-nil-的接口值"><a href="#底层值为-nil-的接口值" class="headerlink" title="底层值为 nil 的接口值"></a>底层值为 nil 的接口值</h5><p>即便接口内的具体值为 nil，方法仍然会被 nil 接收者调用。</p><p>在一些语言中，这会触发一个空指针异常，但在 Go 中通常会写一些方法来优雅地处理它（如本例中的 M 方法）。</p><p>注意： 保存了 nil 具体值的接口其自身并不为 nil。</p><h5 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h5><p>指定了零个方法的接口值被称为 空接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>空接口可保存任何类型的值。（因为每个类型都至少实现了零个方法。）<br>空接口被用来处理未知类型的值。例如，fmt.Print 可接受类型为 interface{} 的任意数量的参数。</p><h5 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h5><p><strong>类型断言</strong>提供了访问接口值底层具体值的方式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t := i.(T)</span><br><span class="line"><span class="comment">//t为接口底层的值</span></span><br><span class="line">t,ok := i.(T)</span><br><span class="line"><span class="comment">//ok返回ture或者false</span></span><br></pre></td></tr></table></figure><h5 id="类型选择"><a href="#类型选择" class="headerlink" title="类型选择"></a>类型选择</h5><p>类型选择 是一种按顺序从几个类型断言中选择分支的结构。</p><p>类型选择与一般的 switch 语句相似，不过类型选择中的 case 为类型（而非值）， 它们针对给定接口值所存储的值的类型进行比较。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>)&#123; <span class="comment">//注意：type为关键字</span></span><br><span class="line"><span class="keyword">case</span> T:</span><br><span class="line">    <span class="comment">// v 的类型为 T</span></span><br><span class="line"><span class="keyword">case</span> S:</span><br><span class="line">    <span class="comment">// v 的类型为 S</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// 没有匹配，v 与 i 的类型相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型选择中的声明与类型断言 i.(T) 的语法相同，只是具体类型 T 被替换成了关键字 type。</p><p>此选择语句判断接口值 i 保存的值类型是 T 还是 S。在 T 或 S 的情况下，变量 v 会分别按 T 或 S 类型保存 i 拥有的值。在默认（即没有匹配）的情况下，变量 v 与 i 的接口类型和值相同。</p><h5 id="练习：Stringer"><a href="#练习：Stringer" class="headerlink" title="练习：Stringer"></a>练习：Stringer</h5><p>通过让 IPAddr 类型实现 fmt.Stringer 来打印点号分隔的地址。</p><p>例如，IPAddr{1, 2, 3, 4} 应当打印为 “1.2.3.4”。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPAddr [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add a "String() string" method to IPAddr.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ipAddr IPAddr)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"%v.%v.%v.%v"</span>, ipAddr[<span class="number">0</span>], ipAddr[<span class="number">1</span>], ipAddr[<span class="number">2</span>], ipAddr[<span class="number">3</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">hosts := <span class="keyword">map</span>[<span class="keyword">string</span>]IPAddr&#123;</span><br><span class="line"><span class="string">"loopback"</span>:  &#123;<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line"><span class="string">"googleDNS"</span>: &#123;<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, ip := <span class="keyword">range</span> hosts &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v: %v\n"</span>, name, ip)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h5><p>Go 程序使用 error 值来表示错误状态。</p><p>与 fmt.Stringer 类似，error 类型是一个内建接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（与 fmt.Stringer 类似，fmt 包在打印值时也会满足 error。）</p><p>通常函数会返回一个 error 值，调用的它的代码应当判断这个错误是否等于 nil 来进行错误处理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i, err := strconv.Atoi(<span class="string">"42"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"couldn't convert number: %v\n"</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Converted integer:"</span>, i)</span><br></pre></td></tr></table></figure><p>error 为 nil 时表示成功；非 nil 的 error 表示失败。</p><h5 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h5><p>io 包指定了 io.Reader 接口，它表示从数据流的末尾进行读取。</p><p>Go 标准库包含了该接口的许多实现，包括文件、网络连接、压缩和加密等等。</p><p>io.Reader 接口有一个 Read 方法：</p><p>func (T) Read(b []byte) (n int, err error)<br>Read 用数据填充给定的字节切片并返回填充的字节数和错误值。在遇到数据流的结尾时，它会返回一个 io.EOF 错误。</p><p>示例代码创建了一个 strings.Reader 并以每次 8 字节的速度读取它的输出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h4&gt;&lt;h5 id=&quot;Go-没有类。不过你可以为结构体类型定义方法。&quot;&gt;&lt;a href=&quot;#Go-没有类。不过你可以为结构体类型定义方法。&quot; class
      
    
    </summary>
    
      <category term="go" scheme="http://blog.zhouyajun.cn/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.zhouyajun.cn/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go语言学习更多类型结构体,数组，切片和映射</title>
    <link href="http://blog.zhouyajun.cn/2018/08/07/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%9B%B4%E5%A4%9A%E7%B1%BB%E5%9E%8B%E7%BB%93%E6%9E%84%E4%BD%93-%E6%95%B0%E7%BB%84%EF%BC%8C%E5%88%87%E7%89%87%E5%92%8C%E6%98%A0%E5%B0%84/"/>
    <id>http://blog.zhouyajun.cn/2018/08/07/go语言学习更多类型结构体-数组，切片和映射/</id>
    <published>2018-08-07T05:35:32.000Z</published>
    <updated>2019-06-04T03:31:43.631Z</updated>
    
    <content type="html"><![CDATA[<h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><p>Go拥有指针。指针保存了值的内存地址。<br>类型*T 指向T类型值的指针。<br>&amp;操作符会生成一个指向其操作数的指针。<br>*操作符表示指针指向的底层值<br>与c不同，Go没有指针运算。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i, j := <span class="number">42</span>, <span class="number">2701</span></span><br><span class="line"></span><br><span class="line">p := &amp;i         <span class="comment">// point to i</span></span><br><span class="line">fmt.Println(*p) <span class="comment">// read i through the pointer</span></span><br><span class="line">*p = <span class="number">21</span>         <span class="comment">// set i through the pointer</span></span><br><span class="line">fmt.Println(i)  <span class="comment">// see the new value of i</span></span><br><span class="line"></span><br><span class="line">p = &amp;j         <span class="comment">// point to j</span></span><br><span class="line">*p = *p / <span class="number">37</span>   <span class="comment">// divide j through the pointer</span></span><br><span class="line">fmt.Println(j) <span class="comment">// see the new value of j</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><p>一个结构体（struct）就是一个字段的集合。<br>结合体字段使用点号来访问。<br>结构体字段可以通过结构体指针来访问。<br>结构体文法通过直接列出字段的值来重新分配一个结构体。<br>使用 Name: 语法可以仅列出部分字段。（字段名的顺序无关。）<br>特殊的前缀 &amp; 返回一个指向结构体的指针。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">v1 = Vertex&#123;<span class="number">1</span>,<span class="number">2</span>&#125;  <span class="comment">// has type Vertex</span></span><br><span class="line">v2 = Vertex&#123;X: <span class="number">1</span>&#125;  <span class="comment">// Y:0 is implicit</span></span><br><span class="line">v3 = Vertex&#123;&#125;      <span class="comment">// X:0 and Y:0</span></span><br><span class="line">p  = &amp;Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// has type *Vertex</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(v1, p, v2, v3)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回：</span></span><br><span class="line">&#123;<span class="number">1</span> <span class="number">2</span>&#125; &amp;&#123;<span class="number">1</span> <span class="number">2</span>&#125; &#123;<span class="number">1</span> <span class="number">0</span>&#125; &#123;<span class="number">0</span> <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>类型<code>[n]T</code>表示拥有n个T类型的值的数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会将变量 a 声明为拥有有 10 个整数的数组。</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>数组的长度是其类型的一部分，因此数组不能改变大小。</p><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><h5 id="类型-T表示一个类型为T的切片"><a href="#类型-T表示一个类型为T的切片" class="headerlink" title="类型[]T表示一个类型为T的切片"></a><strong>类型<code>[]T</code>表示一个类型为T的切片</strong></h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">4</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = a[<span class="number">0</span>,<span class="number">2</span>]  <span class="comment">// [1 2]</span></span><br><span class="line"><span class="keyword">var</span> b = a[<span class="number">1</span>,<span class="number">3</span>] <span class="comment">// [2 3]</span></span><br></pre></td></tr></table></figure><h5 id="切片通过两个下标来界定，即一个上界和一个下界，二者以冒号分隔："><a href="#切片通过两个下标来界定，即一个上界和一个下界，二者以冒号分隔：" class="headerlink" title="切片通过两个下标来界定，即一个上界和一个下界，二者以冒号分隔："></a><strong>切片通过两个下标来界定，即一个上界和一个下界，二者以冒号分隔：</strong></h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a[low : high]</span><br><span class="line"><span class="comment">//它会选择一个半开区间，包括第一个元素，但排除最后一个元素。</span></span><br><span class="line"><span class="comment">//low 默认为0</span></span><br><span class="line"><span class="comment">//high 默认为切片的长度</span></span><br><span class="line">a[<span class="number">0</span>:<span class="number">10</span>] == a[:<span class="number">10</span>] == a[<span class="number">0</span>:] == a[:]</span><br></pre></td></tr></table></figure><h5 id="切片的长度就是它所包含的元素个数。"><a href="#切片的长度就是它所包含的元素个数。" class="headerlink" title="切片的长度就是它所包含的元素个数。"></a><strong>切片的长度就是它所包含的元素个数。</strong></h5><p><strong>切片的容量是从它的第一个元素开始数，到其底层数组元素末尾的个数。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取切片长度</span></span><br><span class="line"><span class="keyword">var</span> s = []<span class="keyword">int</span> <span class="comment">//零值 == nil</span></span><br><span class="line"><span class="built_in">len</span>(s)  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">cap</span>(s) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h5 id="用make函数创建切片"><a href="#用make函数创建切片" class="headerlink" title="用make函数创建切片"></a><strong>用make函数创建切片</strong></h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二个参数为长度，第三个参数为容量</span></span><br><span class="line">a := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">5</span>)</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">0</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h5 id="切片的切片"><a href="#切片的切片" class="headerlink" title="切片的切片"></a>切片的切片</h5><p>切片可包含任何类型，甚至包括其他的切片</p><h5 id="向切片追加元素"><a href="#向切片追加元素" class="headerlink" title="向切片追加元素"></a>向切片追加元素</h5><p><strong>func  append( s []T，vs …T)  [ ]T</strong><br>append 的第一个参数 s 是一个元素类型为 T 的切片，其余类型为 T 的值将会追加到该切片的末尾。</p><p>append 的结果是一个包含原切片所有元素加上新添加元素的切片。</p><h5 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h5><p>for 循环的range形式 可遍历切片或映射<br>当使用 for 循环遍历切片时，每次迭代都会返回两个值。第一个值为当前元素的下标，第二个值为该下标所对应元素的一份副本。<br>可以将下标或值赋予 _ 来忽略它。</p><p>若你只需要索引，去掉 , value 的部分即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pow = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123;</span><br><span class="line">fmt.Printf(<span class="string">"2**%d = %d\n"</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line"><span class="number">2</span>**<span class="number">0</span> = <span class="number">1</span></span><br><span class="line"><span class="number">2</span>**<span class="number">1</span> = <span class="number">2</span></span><br><span class="line"><span class="number">2</span>**<span class="number">2</span> = <span class="number">4</span></span><br><span class="line"><span class="number">2</span>**<span class="number">3</span> = <span class="number">8</span></span><br><span class="line"><span class="number">2</span>**<span class="number">4</span> = <span class="number">16</span></span><br><span class="line"><span class="number">2</span>**<span class="number">5</span> = <span class="number">32</span></span><br><span class="line"><span class="number">2</span>**<span class="number">6</span> = <span class="number">64</span></span><br><span class="line"><span class="number">2</span>**<span class="number">7</span> = <span class="number">128</span></span><br><span class="line"><span class="comment">//i = 切片 pow 的下标</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pow&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 忽略切片下标。只取值</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> pow&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><p>映射将键映射到值。<br>映射的零值为 nil 。nil 映射既没有键，也不能添加键。<br>映射的文法与结构体相似，不过必须有键名。<br>若顶级类型只是一个类型名，你可以在文法的元素中省略它。<br>示例：var m  = map[string]int </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置会插入值</span></span><br><span class="line">m[<span class="string">'test'</span>] = <span class="number">111</span></span><br><span class="line"><span class="comment">//获取值</span></span><br><span class="line">test := m[<span class="string">'test'</span>]</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line"><span class="built_in">delete</span>(m,<span class="string">'test'</span>)</span><br><span class="line"><span class="comment">//通过双赋值检测某个键是否存在：</span></span><br><span class="line">elem ,ok := m[<span class="string">'test'</span>]</span><br><span class="line">m中存在 test, ok为ture,反之为<span class="literal">false</span></span><br><span class="line">m中存在test, elem为值，反之为 类型的零值</span><br></pre></td></tr></table></figure><h4 id="函数值"><a href="#函数值" class="headerlink" title="函数值"></a>函数值</h4><p>函数也是值。它们可以像其它值一样传递。<br>函数值可以用作函数的参数或返回值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(fn <span class="keyword">func</span>(<span class="keyword">float64</span>, <span class="keyword">float64</span>)</span><span class="title">float64</span>)<span class="title">float64</span></span>&#123;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line"><span class="keyword">return</span> fn(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数的闭包"><a href="#函数的闭包" class="headerlink" title="函数的闭包"></a>函数的闭包</h5><p>Go 函数可以是一个闭包。闭包是一个函数值，它引用了其函数体之外的变量。该函数可以访问并赋予其引用的变量的值，换句话说，该函数被“绑定”在了这些变量上。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;/a&gt;指针&lt;/h4&gt;&lt;p&gt;Go拥有指针。指针保存了值的内存地址。&lt;br&gt;类型*T 指向T类型值的指针。&lt;br&gt;&amp;amp;操作符会生成一个指向其操作数的指针。&lt;br&gt;*操作符表示指针指向的底层值&lt;br&gt;与c不同，Go没有指针运算。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	i, j := &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2701&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p := &amp;amp;i         &lt;span class=&quot;comment&quot;&gt;// point to i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(*p) &lt;span class=&quot;comment&quot;&gt;// read i through the pointer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*p = &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;         &lt;span class=&quot;comment&quot;&gt;// set i through the pointer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(i)  &lt;span class=&quot;comment&quot;&gt;// see the new value of i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p = &amp;amp;j         &lt;span class=&quot;comment&quot;&gt;// point to j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*p = *p / &lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// divide j through the pointer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(j) &lt;span class=&quot;comment&quot;&gt;// see the new value of j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.zhouyajun.cn/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.zhouyajun.cn/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>mac使用配置proxychains-ng</title>
    <link href="http://blog.zhouyajun.cn/2018/08/06/mac%E4%BD%BF%E7%94%A8proxychains-ng/"/>
    <id>http://blog.zhouyajun.cn/2018/08/06/mac使用proxychains-ng/</id>
    <published>2018-08-06T08:17:12.000Z</published>
    <updated>2019-06-04T03:31:43.631Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装proxychains-ng"><a href="#安装proxychains-ng" class="headerlink" title="安装proxychains-ng"></a>安装proxychains-ng</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install proxychains-ng</span><br></pre></td></tr></table></figure><h4 id="修改配置文件（-usr-local-etc-proxychains-conf）"><a href="#修改配置文件（-usr-local-etc-proxychains-conf）" class="headerlink" title="修改配置文件（/usr/local/etc/proxychains.conf）"></a>修改配置文件（/usr/local/etc/proxychains.conf）</h4><p>最后一行修改为：1086为socks5 端口，视自己的shadowsocks设置而定（shadowsocks-x默认为1080，shadowsocks-ng默认为1086）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks5  127.0.0.1 1086</span><br></pre></td></tr></table></figure><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>在执行命令之前添加 ： proxychains4,如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 curl ip.cn</span><br></pre></td></tr></table></figure><h4 id="特别注意："><a href="#特别注意：" class="headerlink" title="特别注意："></a>特别注意：</h4><p><strong>mac os sierra 因为安全机制并不能成功代理！</strong></p><a id="more"></a><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><h5 id="1-关闭SIP（不推荐）"><a href="#1-关闭SIP（不推荐）" class="headerlink" title="1.关闭SIP（不推荐）"></a>1.关闭SIP（不推荐）</h5><p>关闭sip,<a href="https://www.zhihu.com/question/40239893/answer/85543540" target="_blank" rel="noopener">了解风险</a></p><h5 id="2-移动执行命令"><a href="#2-移动执行命令" class="headerlink" title="2.移动执行命令"></a>2.移动执行命令</h5><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/proxy_bin</span><br><span class="line">$ cp /usr/bin/curl ~/proxy_bin</span><br><span class="line">//原来的</span><br><span class="line">$ proxychains4 curl ip.cn</span><br><span class="line">[proxychains] config file found: /usr/local/etc/proxychains.conf</span><br><span class="line">[proxychains] preloading /usr/local/Cellar/proxychains-ng/4.13/lib/libproxychains4.dylib</span><br><span class="line">当前 IP：114.226.157.29 来自：江苏省常州市 电信</span><br><span class="line"></span><br><span class="line">//复制的</span><br><span class="line">$ proxychains4 ~/proxy_bin/curl ip.cn</span><br><span class="line">[proxychains] config file found: /usr/local/etc/proxychains.conf</span><br><span class="line">[proxychains] preloading /usr/local/Cellar/proxychains-ng/4.13/lib/libproxychains4.dylib</span><br><span class="line">[proxychains] DLL init: proxychains-ng 4.13</span><br><span class="line">[proxychains] Strict chain  ...  127.0.0.1:1086  ...  ip.cn:80  ...  OK</span><br><span class="line">当前 IP：107.151.181.162 来自：美国 Zenlayer</span><br></pre></td></tr></table></figure><h5 id="配置环境代理-推荐"><a href="#配置环境代理-推荐" class="headerlink" title="配置环境代理(推荐)"></a>配置环境代理(推荐)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.zshrc </span><br><span class="line">//添加如下内容(注意：1080端口必须是你的shadowsocks 的socks5 端口，不是固定)</span><br><span class="line"># proxy list</span><br><span class="line">alias proxy=&apos;export all_proxy=socks5://127.0.0.1:1080&apos;</span><br><span class="line">alias unproxy=&apos;unset all_proxy&apos;</span><br><span class="line">//使修改生效</span><br><span class="line">source ~/.zshrc</span><br><span class="line">//测试--为使用代理</span><br><span class="line">$ curl ip.cn</span><br><span class="line">当前 IP：114.226.157.29 来自：江苏省常州市 电信</span><br><span class="line">//使用代理</span><br><span class="line">$ proxy</span><br><span class="line">$ curl ip.cn</span><br><span class="line">当前 IP：107.151.181.162 来自：美国 Zenlayer</span><br><span class="line">// 关闭代理</span><br><span class="line">$ unproxy</span><br><span class="line">$ curl ip.cn</span><br><span class="line">当前 IP：114.226.157.29 来自：江苏省常州市 电信</span><br></pre></td></tr></table></figure><p><strong>修改</strong><br>修改成这样后，go get 代理成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias proxy=&apos;export all_proxy=socks5://127.0.0.1:1086 &amp;&amp; export http_proxy=socks5://127.0.0.1:1086 &amp;&amp; export https_proxy=socks5://127.0.0.1:1086&apos;</span><br><span class="line">alias unproxy=&apos;unset all_proxy &amp;&amp; unset http_proxy &amp;&amp; unset https_proxy&apos;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/rofl0r/proxychains-ng/issues/78" target="_blank" rel="noopener">参考链接-1</a><br><a href="https://github.com/mrdulin/blog/issues/18" target="_blank" rel="noopener">参考链接-2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装proxychains-ng&quot;&gt;&lt;a href=&quot;#安装proxychains-ng&quot; class=&quot;headerlink&quot; title=&quot;安装proxychains-ng&quot;&gt;&lt;/a&gt;安装proxychains-ng&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install proxychains-ng&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;修改配置文件（-usr-local-etc-proxychains-conf）&quot;&gt;&lt;a href=&quot;#修改配置文件（-usr-local-etc-proxychains-conf）&quot; class=&quot;headerlink&quot; title=&quot;修改配置文件（/usr/local/etc/proxychains.conf）&quot;&gt;&lt;/a&gt;修改配置文件（/usr/local/etc/proxychains.conf）&lt;/h4&gt;&lt;p&gt;最后一行修改为：1086为socks5 端口，视自己的shadowsocks设置而定（shadowsocks-x默认为1080，shadowsocks-ng默认为1086）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;socks5  127.0.0.1 1086&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h4&gt;&lt;p&gt;在执行命令之前添加 ： proxychains4,如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;proxychains4 curl ip.cn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;特别注意：&quot;&gt;&lt;a href=&quot;#特别注意：&quot; class=&quot;headerlink&quot; title=&quot;特别注意：&quot;&gt;&lt;/a&gt;特别注意：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;mac os sierra 因为安全机制并不能成功代理！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mac" scheme="http://blog.zhouyajun.cn/categories/mac/"/>
    
    
      <category term="mac" scheme="http://blog.zhouyajun.cn/tags/mac/"/>
    
      <category term="proxychains-ng" scheme="http://blog.zhouyajun.cn/tags/proxychains-ng/"/>
    
  </entry>
  
  <entry>
    <title>go流程控制结构</title>
    <link href="http://blog.zhouyajun.cn/2018/08/06/go%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
    <id>http://blog.zhouyajun.cn/2018/08/06/go流程控制结构/</id>
    <published>2018-08-06T01:30:45.000Z</published>
    <updated>2019-06-04T03:31:43.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="go语言学习-流程控制语句：for、if、else、switch、defer"><a href="#go语言学习-流程控制语句：for、if、else、switch、defer" class="headerlink" title="go语言学习-(流程控制语句：for、if、else、switch、defer)"></a>go语言学习-(流程控制语句：for、if、else、switch、defer)</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>Go只有一种循环结构： for循环<br>Go的for语句后面没有<strong><code>小括号（）</code></strong><code>大括号{}</code>是必须的<br>初始化语句和后置语句是可选的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for a=0;a&lt;10;a++&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for ;a&lt;10; &#123;</span><br><span class="line">&#125;</span><br><span class="line">//上面可以去掉；就等于c语言中的while</span><br><span class="line">for a&lt;10 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>if语句与for循环类似，表达式外无需<strong><code>小括号（）</code></strong>，而<strong><code>大括号{}</code></strong>则是必须的。<br>if语句可以在表达式前执行一个简单的语句。<br><strong>该语句申明的变量作用域仅在if之内</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if a&lt;10 &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if b := 10;b&lt;10&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p>go自动提供了在这些语言中的每个case后面所需的break语句。<br>go的另一个重点的不同在于switch的case 无需为常量，且取值不必为整数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">os := runtime.GOOS</span><br><span class="line">switch os &#123;</span><br><span class="line">case &quot;darwin&quot;:</span><br><span class="line">fmt.Println(&quot;OS X.&quot;)</span><br><span class="line">case &quot;linux&quot;:</span><br><span class="line">fmt.Println(&quot;Linux.&quot;)</span><br><span class="line">default:</span><br><span class="line">// freebsd, openbsd,</span><br><span class="line">// plan9, windows...</span><br><span class="line">fmt.Printf(&quot;%s.&quot;, os)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>无条件的switch == switch true</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">switch &#123;</span><br><span class="line">case 1:</span><br><span class="line">fmt.Printf(&apos;1&apos;)</span><br><span class="line">case 2:</span><br><span class="line">fmt.Printf(&apos;2&apos;)</span><br><span class="line">default:</span><br><span class="line">fmt.Printf(&apos;default&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p>defer 语句会将函数推迟到外层函数返回之后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">defer fmt.Println(&quot;world&quot;)</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;hello&quot;)</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;hello111&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//程序返回</span><br><span class="line">hello</span><br><span class="line">hello111</span><br><span class="line">world</span><br></pre></td></tr></table></figure><h4 id="defer-栈"><a href="#defer-栈" class="headerlink" title="defer 栈"></a>defer 栈</h4><p>推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(&quot;counting&quot;)</span><br><span class="line"></span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">defer fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;done&quot;)</span><br><span class="line">&#125;</span><br><span class="line">//返回</span><br><span class="line">counting</span><br><span class="line">done</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;go语言学习-流程控制语句：for、if、else、switch、defer&quot;&gt;&lt;a href=&quot;#go语言学习-流程控制语句：for、if、else、switch、defer&quot; class=&quot;headerlink&quot; title=&quot;go语言学习-(流程控制语句：for、if、else、switch、defer)&quot;&gt;&lt;/a&gt;go语言学习-(流程控制语句：for、if、else、switch、defer)&lt;/h3&gt;&lt;h4 id=&quot;for&quot;&gt;&lt;a href=&quot;#for&quot; class=&quot;headerlink&quot; title=&quot;for&quot;&gt;&lt;/a&gt;for&lt;/h4&gt;&lt;p&gt;Go只有一种循环结构： for循环&lt;br&gt;Go的for语句后面没有&lt;strong&gt;&lt;code&gt;小括号（）&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;大括号{}&lt;/code&gt;是必须的&lt;br&gt;初始化语句和后置语句是可选的&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for a=0;a&amp;lt;10;a++&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for ;a&amp;lt;10; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//上面可以去掉；就等于c语言中的while&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for a&amp;lt;10 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.zhouyajun.cn/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.zhouyajun.cn/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go包变量和函数</title>
    <link href="http://blog.zhouyajun.cn/2018/08/05/go%E5%8C%85%E5%8F%98%E9%87%8F%E5%92%8C%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.zhouyajun.cn/2018/08/05/go包变量和函数/</id>
    <published>2018-08-05T13:44:39.000Z</published>
    <updated>2019-06-04T03:31:43.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GO语言学习-包，变量，函数"><a href="#GO语言学习-包，变量，函数" class="headerlink" title="GO语言学习-(包，变量，函数)"></a>GO语言学习-(包，变量，函数)</h3><h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><p>每个go程序都有包构成。<br>程序从main包开始运行。<br>按照约定：包名与导入路径的最后一个元素一只。</p><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//分组导入(更好)</span><br><span class="line">import(</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;math&quot;</span><br><span class="line">)</span><br><span class="line">//多条导入</span><br><span class="line">import fmt</span><br><span class="line">import math</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><p>如果一个名字以大写字母开头，那么它就是已导出的。</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数可以没有参数，或者多个参数，注意参数类型在参数名之后。小括号后面的类型是返回值类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func test(x int,y int)int&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当连续两个或以上参数类型相同时，除连续相同的最后一个参数，其他参数的类型都可以省略,返回值命名类型也一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func test(x,y int)int&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>函数可以返回多个值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func test(x ,y int)(int,int)&#123;</span><br><span class="line">return x,y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>函数的返回值可被命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func test(sum)(x int ,y int)&#123;</span><br><span class="line">x = sum -1</span><br><span class="line">y = sum -x</span><br><span class="line">return </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var  x int</span><br><span class="line">var y string</span><br><span class="line">var z bool</span><br><span class="line">var a,b,c bool</span><br><span class="line">var a,b,c int = 1,2,3</span><br><span class="line">var a int = 1</span><br></pre></td></tr></table></figure><p><strong>声明变量语法块用法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var (</span><br><span class="line"> a int = 1</span><br><span class="line"> b,c int = 3,4</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>在函数中，可以使用短变量申明：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func test(x ,y int)int&#123;</span><br><span class="line">c := x+y</span><br><span class="line">return c</span><br><span class="line">&#125;</span><br><span class="line">func main()&#123;</span><br><span class="line">test :=1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>没有明确初始值的变量声明会被赋予它们的零值</strong><br>数值型 - 0<br>布尔类型 - false<br>字符串为 - “”（空字符串）</p><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><ol><li><strong>bool</strong></li><li><strong>string</strong></li><li><strong>int int8 int16 int32 int64</strong></li><li><strong>uint uint8 uint16 uint32 uint64</strong></li><li><strong>float32 float64</strong></li><li><strong>complex64 complex128</strong></li></ol><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>T(v)<br>int(12.0)<br>float64(1212)</p><h4 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h4><p>当指定一个变量而未指定变量类型时，变量的类型由右值推导而出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = 1 // a 为int</span><br><span class="line">func main()&#123;</span><br><span class="line">b := &quot;12112&quot; // b为string</span><br><span class="line">c := 1.002  // float64</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>const 关键字定义常量<br>常量可以是字符，字符串，数值，布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Pi float64 = 3.1415</span><br></pre></td></tr></table></figure><p>一个未指定类型的常量由上下文来决定其类型</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GO语言学习-包，变量，函数&quot;&gt;&lt;a href=&quot;#GO语言学习-包，变量，函数&quot; class=&quot;headerlink&quot; title=&quot;GO语言学习-(包，变量，函数)&quot;&gt;&lt;/a&gt;GO语言学习-(包，变量，函数)&lt;/h3&gt;&lt;h4 id=&quot;包&quot;&gt;&lt;a href=&quot;#包&quot; class=&quot;headerlink&quot; title=&quot;包&quot;&gt;&lt;/a&gt;包&lt;/h4&gt;&lt;p&gt;每个go程序都有包构成。&lt;br&gt;程序从main包开始运行。&lt;br&gt;按照约定：包名与导入路径的最后一个元素一只。&lt;/p&gt;
&lt;h4 id=&quot;导入&quot;&gt;&lt;a href=&quot;#导入&quot; class=&quot;headerlink&quot; title=&quot;导入&quot;&gt;&lt;/a&gt;导入&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//分组导入(更好)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;math&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//多条导入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import fmt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import math&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.zhouyajun.cn/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.zhouyajun.cn/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go代码工作空间</title>
    <link href="http://blog.zhouyajun.cn/2018/08/05/go%E4%BB%A3%E7%A0%81%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/"/>
    <id>http://blog.zhouyajun.cn/2018/08/05/go代码工作空间/</id>
    <published>2018-08-05T13:44:12.000Z</published>
    <updated>2019-06-04T03:31:43.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="go语言学习-go代码工作空间"><a href="#go语言学习-go代码工作空间" class="headerlink" title="go语言学习-go代码工作空间"></a>go语言学习-go代码工作空间</h3><h4 id="go代码工作空间"><a href="#go代码工作空间" class="headerlink" title="go代码工作空间"></a>go代码工作空间</h4><p>go代码必须放置在工作空间内，它其实就是一个目录，其中包含三个子目录。</p><h5 id="1-src-目录"><a href="#1-src-目录" class="headerlink" title="1.  src 目录"></a>1.  src 目录</h5><p>目录包含Go的源文件，它们被组织成包（每个目录都对应一个包）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=~/workspace/go</span><br></pre></td></tr></table></figure><h5 id="2-pkg-目录"><a href="#2-pkg-目录" class="headerlink" title="2. pkg 目录"></a>2. pkg 目录</h5><p>pkg 目录包含包对象</p><h5 id="3-bin-目录"><a href="#3-bin-目录" class="headerlink" title="3. bin 目录"></a>3. bin 目录</h5><p>bin目录包含可执行命令</p><h5 id="4-将bin目录加入系统path"><a href="#4-将bin目录加入系统path" class="headerlink" title="4. 将bin目录加入系统path"></a>4. 将bin目录加入系统path</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$path</span>:<span class="variable">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure><p>这样在任何地方都可执行go可执行文件</p><h5 id="5-go-环境查看"><a href="#5-go-环境查看" class="headerlink" title="5. go 环境查看"></a>5. go 环境查看</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ go env</span><br><span class="line">GOARCH=<span class="string">"amd64"</span></span><br><span class="line">GOBIN=<span class="string">""</span></span><br><span class="line">GOCACHE=<span class="string">"/Users/zyj/Library/Caches/go-build"</span></span><br><span class="line">GOEXE=<span class="string">""</span></span><br><span class="line">GOHOSTARCH=<span class="string">"amd64"</span></span><br><span class="line">GOHOSTOS=<span class="string">"darwin"</span></span><br><span class="line">GOOS=<span class="string">"darwin"</span></span><br><span class="line">GOPATH=<span class="string">"/Users/zyj/workspace/go"</span></span><br><span class="line">GORACE=<span class="string">""</span></span><br><span class="line">GOROOT=<span class="string">"/usr/local/go"</span></span><br><span class="line">GOTMPDIR=<span class="string">""</span></span><br><span class="line">GOTOOLDIR=<span class="string">"/usr/local/go/pkg/tool/darwin_amd64"</span></span><br><span class="line">GCCGO=<span class="string">"gccgo"</span></span><br><span class="line">CC=<span class="string">"clang"</span></span><br><span class="line">CXX=<span class="string">"clang++"</span></span><br><span class="line">CGO_ENABLED=<span class="string">"1"</span></span><br><span class="line">CGO_CFLAGS=<span class="string">"-g -O2"</span></span><br><span class="line">CGO_CPPFLAGS=<span class="string">""</span></span><br><span class="line">CGO_CXXFLAGS=<span class="string">"-g -O2"</span></span><br><span class="line">CGO_FFLAGS=<span class="string">"-g -O2"</span></span><br><span class="line">CGO_LDFLAGS=<span class="string">"-g -O2"</span></span><br><span class="line">PKG_CONFIG=<span class="string">"pkg-config"</span></span><br><span class="line">GOGCCFLAGS=<span class="string">"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/q1/_vk1dvf156701f1zfhgvv5rm0000gp/T/go-build170346034=/tmp/go-build -gno-record-gcc-switches -fno-common"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;go语言学习-go代码工作空间&quot;&gt;&lt;a href=&quot;#go语言学习-go代码工作空间&quot; class=&quot;headerlink&quot; title=&quot;go语言学习-go代码工作空间&quot;&gt;&lt;/a&gt;go语言学习-go代码工作空间&lt;/h3&gt;&lt;h4 id=&quot;go代码工作空间&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="go" scheme="http://blog.zhouyajun.cn/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.zhouyajun.cn/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>shadowsocks自定义代理规则user-rule设置方法</title>
    <link href="http://blog.zhouyajun.cn/2018/08/03/shadowsocks%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99user-rule%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.zhouyajun.cn/2018/08/03/shadowsocks自定义代理规则user-rule设置方法/</id>
    <published>2018-08-03T01:44:51.000Z</published>
    <updated>2019-06-04T03:31:43.630Z</updated>
    
    <content type="html"><![CDATA[<p>最新版本的shadowsocks支持用户自定义代理规则，更新到最新的版本的shadowsocks后， 在shadowsocks文件夹内会有一个user-rule.txt文档，如果用户需要添加自定义代理规则，只需要编辑user-rule.txt文件。<br>自定义代理规则设置语法与GFWlist相同，即<a href="https://adblockplus.org/en/filter-cheatsheet" target="_blank" rel="noopener">Adblock Plus filters explained</a>。</p><h4 id="规则说明"><a href="#规则说明" class="headerlink" title="规则说明"></a>规则说明</h4><h5 id="1-通配符支持，如-baidu-com-实际书写时可省略-号"><a href="#1-通配符支持，如-baidu-com-实际书写时可省略-号" class="headerlink" title="1. 通配符支持，如*.baidu.com/,实际书写时可省略 *号"></a>1. 通配符支持，如*.baidu.com/,实际书写时可省略 *号</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.baidu.com</span><br></pre></td></tr></table></figure><h5 id="2-正则表达式支持，以-开始和结束"><a href="#2-正则表达式支持，以-开始和结束" class="headerlink" title="2. 正则表达式支持，以\开始和结束"></a>2. 正则表达式支持，以\开始和结束</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\[\w]+:Wexample.com\</span><br></pre></td></tr></table></figure><h5 id="3-例外规则-满足-后规则的地址不使用代理"><a href="#3-例外规则-满足-后规则的地址不使用代理" class="headerlink" title="3.例外规则(满足@@后规则的地址不使用代理)"></a>3.例外规则(满足@@后规则的地址不使用代理)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@@*.example.com/*</span><br></pre></td></tr></table></figure><h5 id="4-用-符号，匹配地址开始和结束"><a href="#4-用-符号，匹配地址开始和结束" class="headerlink" title="4.用|符号，匹配地址开始和结束"></a>4.用|符号，匹配地址开始和结束</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|http:example.com</span><br><span class="line">example.com|</span><br></pre></td></tr></table></figure><h5 id="5-标记，匹配协议"><a href="#5-标记，匹配协议" class="headerlink" title="5.||标记，匹配协议"></a>5.||标记，匹配协议</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">||example.com</span><br></pre></td></tr></table></figure><h5 id="6-注释！"><a href="#6-注释！" class="headerlink" title="6.注释！"></a>6.注释！</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!Comment</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>user-rule.txt中的规则并不能直接被shadowsocks使用，如要添加到user-rule.txt中的规则生效，你还要执行下面重要的一步：更新本地的PAC，更新后user-rule.txt中的自定义规则会添加到PAC.txt文件内。（备注：每次编辑完user-rule.txt后，均需执行“从GFWList更新本地PAC”，使本次规则也生效。）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最新版本的shadowsocks支持用户自定义代理规则，更新到最新的版本的shadowsocks后， 在shadowsocks文件夹内会有一个user-rule.txt文档，如果用户需要添加自定义代理规则，只需要编辑user-rule.txt文件。&lt;br&gt;自定义代理规则设置
      
    
    </summary>
    
      <category term="shadowsocks" scheme="http://blog.zhouyajun.cn/categories/shadowsocks/"/>
    
    
      <category term="shadowsocks" scheme="http://blog.zhouyajun.cn/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>git命令复习</title>
    <link href="http://blog.zhouyajun.cn/2018/07/29/git%E5%91%BD%E4%BB%A4%E5%A4%8D%E4%B9%A0/"/>
    <id>http://blog.zhouyajun.cn/2018/07/29/git命令复习/</id>
    <published>2018-07-29T01:26:21.000Z</published>
    <updated>2019-06-04T03:31:43.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git-命令复习"><a href="#git-命令复习" class="headerlink" title="git 命令复习"></a>git 命令复习</h3><p><strong>参考链接：</strong><a href="https://github.com/flyhigher139/Git-Cheat-Sheet" target="_blank" rel="noopener">Git Cheat Sheet 中文版 </a></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git config --list</code></td><td align="left">列出当前配置</td></tr><tr><td align="left"><code>git config --local --list</code></td><td align="left">列出当前仓库配置</td></tr><tr><td align="left"><code>git config --global --list</code></td><td align="left">列出全局配置</td></tr><tr><td align="left"><code>git config --system --list</code></td><td align="left">列出系统配置</td></tr><tr><td align="left"><code>git config --global user.name &quot;zyj&quot;</code></td><td align="left">设置用户名</td></tr><tr><td align="left"><code>git config --global user.email</code></td><td align="left">设置用户的邮箱</td></tr><tr><td align="left"><a id="more"></a></td><td align="left"></td></tr><tr><td align="left">#### 配置文件</td><td align="left"></td></tr><tr><td align="left">文件地址</td><td align="left">说明</td></tr><tr><td align="left">:——–</td><td align="left">:——–</td></tr><tr><td align="left"><code>&lt;repo&gt;/.git/config</code></td><td align="left">Repository配置对应的配置文件路径[–local]：</td></tr><tr><td align="left"><code>~/.gitconfig</code></td><td align="left">用户全局配置对应的配置文件路径[–global]：</td></tr><tr><td align="left"><code>/etc/gitconfig</code></td><td align="left">系统配置对应的配置文件路径[–local]：(不一定存在)</td></tr></tbody></table><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><h5 id="复制一个已创建的仓库："><a href="#复制一个已创建的仓库：" class="headerlink" title="复制一个已创建的仓库："></a>复制一个已创建的仓库：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 通过ssh</span><br><span class="line">$ git clone ssh://user@domain.com/repo.git</span><br><span class="line"># 通过HTTP</span><br><span class="line">$ git clone http://domain.com/user/repo.git</span><br></pre></td></tr></table></figure><h5 id="创建一个本地新仓库"><a href="#创建一个本地新仓库" class="headerlink" title="创建一个本地新仓库"></a>创建一个本地新仓库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h4 id="本地修改"><a href="#本地修改" class="headerlink" title="本地修改"></a>本地修改</h4><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git status</code></td><td align="left">显示工作路径下已修改的文件</td></tr><tr><td align="left"><code>git diff</code></td><td align="left">显示与上次提交版本的不同</td></tr><tr><td align="left"><code>git add .</code></td><td align="left">把当前所有修改添加到下次提交中</td></tr><tr><td align="left"><code>git add -p &lt;file&gt;</code></td><td align="left">把对某个文件的修改添加到下次提交中</td></tr><tr><td align="left"><code>git commit -a</code></td><td align="left">提交本地的所有修改</td></tr><tr><td align="left"><code>git commit</code></td><td align="left">提交之前已标记的变化</td></tr><tr><td align="left"><code>git commit -m &#39;message here&#39;</code></td><td align="left">提交之前已标记的变化并附加消息提交</td></tr><tr><td align="left"><code>git commit --date=&quot;</code>date –date=’n day ago’<code>&quot; -am &quot;Commit Message&quot;</code></td><td align="left">提交，并将提交时间设置为之前的某个日期</td></tr><tr><td align="left">#### 修改上次提交</td><td align="left"></td></tr><tr><td align="left">命令</td><td align="left">说明</td></tr><tr><td align="left">:——–</td><td align="left">:——–</td></tr><tr><td align="left"><code>git commit --amend</code></td><td align="left">修改上次提交,既可以对上次提交的内容进行修改，也可以修改提交说明</td></tr><tr><td align="left"><code>git commit --amend --no-edit</code></td><td align="left">编辑器会弹出上一次提交的信息，加入–no-edit标记会修复提交但不修改提交信息</td></tr><tr><td align="left"><code>git commit --amend --author=&quot;username &lt;email&gt;&quot;</code></td><td align="left">修改用户信息</td></tr><tr><td align="left"><code>git push --force-with-lease origin master</code></td><td align="left">修改提交强制同步到远程</td></tr></tbody></table><h4 id="保存当前修改，并返回上一次干净的仓库"><a href="#保存当前修改，并返回上一次干净的仓库" class="headerlink" title="保存当前修改，并返回上一次干净的仓库"></a>保存当前修改，并返回上一次干净的仓库</h4><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git stash</code>,<code>git stash save</code></td><td align="left">保存当前的修改</td></tr><tr><td align="left"><code>git stash list</code></td><td align="left">暂存的内容列表</td></tr><tr><td align="left"><code>git stash apply</code></td><td align="left">重新存储最后一次缓存的内容，当前的修改保存到当前分支，缓存标签仍然<strong>存在</strong>于 git stash list列表中</td></tr><tr><td align="left"><code>git stash apply 0</code></td><td align="left">重新存储编号为0的内容，当前的修改保存到当前分支，缓存标签仍然<strong>存在</strong>于 git stash list列表中</td></tr><tr><td align="left"><code>git stash pop</code></td><td align="left">重新存储最后一次缓存的内容，当前的修改保存到当前分支，<strong>删除</strong>git stash list 列表中的存储编号</td></tr><tr><td align="left"><code>git stash pop 1</code></td><td align="left">重新存储编号为0的缓存的内容，当前的修改保存到当前分支，<strong>删除</strong>git stash list 列表中的存储编号</td></tr><tr><td align="left"><code>git stash show [stash]</code></td><td align="left">显示stash和上一个提交点的差异</td></tr><tr><td align="left"><code>git stash drop [0]</code></td><td align="left">删除编号为0的暂存</td></tr><tr><td align="left"><code>git stash clear</code></td><td align="left">清空所有的暂存列表</td></tr></tbody></table><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git grep &quot;hello&quot;</code></td><td align="left">从当前目录的所有文件中查找文本内容</td></tr><tr><td align="left"><code>git grep &quot;hello&quot; v2.5</code></td><td align="left">从某一版本中搜索文本</td></tr><tr><td align="left">#### 提交历史</td><td align="left"></td></tr><tr><td align="left">命令</td><td align="left">说明</td></tr><tr><td align="left">:——–</td><td align="left">:——–</td></tr><tr><td align="left"><code>git log</code></td><td align="left">显示所有的提交记录,（显示hash,作者信息，提交的标题和时间）</td></tr><tr><td align="left"><code>git log --oneline</code></td><td align="left"></td></tr><tr><td align="left"><code>git log --author=&quot;zyj&quot;</code></td><td align="left"></td></tr><tr><td align="left"><code>git log -p &lt;file&gt;</code></td><td align="left">显示某个文件的所有修改</td></tr><tr><td align="left"><code>git log  origin/master --left-right</code></td><td align="left">显示远端的提交历史</td></tr><tr><td align="left"><code>git blame &lt;filename&gt;</code></td><td align="left">查看某个文件的修改历史</td></tr><tr><td align="left"><code>git blame -L &lt;start&gt;,&lt;end&gt; &lt;filename&gt;</code></td><td align="left">查看某个文件的修改历史，并指定开始行和结束行</td></tr><tr><td align="left"><code>git reflog show</code></td><td align="left">显示所有分支的（包括远端）的提交历史</td></tr><tr><td align="left"><code>git reflog delete</code></td><td align="left">删除reflog</td></tr></tbody></table><h4 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h4><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git branch</code></td><td align="left">列出所有的分支</td></tr><tr><td align="left"><code>git branch -r</code></td><td align="left">列出所有的远端分支</td></tr><tr><td align="left"><code>git checkout &lt;branch&gt;</code></td><td align="left">切换分支</td></tr><tr><td align="left"><code>git checkout -b &lt;branch&gt;</code></td><td align="left">创建并切换到新分支</td></tr><tr><td align="left"><code>git branch &lt;new-branch&gt;</code></td><td align="left">基于当前分支创建新分支</td></tr><tr><td align="left"><code>git branch --track &lt;new-branch&gt; &lt;remote-branch&gt;</code></td><td align="left">基于远程分支创建新的可追溯的分支</td></tr><tr><td align="left"><code>git branch -d &lt;branch&gt;</code></td><td align="left">删除本地分支</td></tr><tr><td align="left"><code>git branch -D &lt;branch&gt;</code></td><td align="left">强制删除一个分支</td></tr><tr><td align="left"><code>git tag &lt;tag_name&gt;</code></td><td align="left">给当前版本打标签，没有说明</td></tr><tr><td align="left"><code>git tag -a &lt;tag_name&gt;</code></td><td align="left">给当前版本打标签，并附上说明</td></tr><tr><td align="left"><code>git tag -l</code></td><td align="left">查看所有的标签列表</td></tr><tr><td align="left"><code>git tag -d &lt;tag_name&gt;</code></td><td align="left">删除一个本地标签</td></tr><tr><td align="left"><code>git push origin  :refs/tags/&lt;tagname&gt;</code></td><td align="left">删除一个远端标签</td></tr><tr><td align="left"><code>git push origin v1.0</code></td><td align="left">发布一个标签到origin</td></tr><tr><td align="left"><code>git push --tags</code></td><td align="left">发布本地所有的标签到远端</td></tr></tbody></table><h4 id="更新与发布"><a href="#更新与发布" class="headerlink" title="更新与发布"></a>更新与发布</h4><ol><li><p><code>git remote -v</code> 显示所有的远端分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origingit@gitee.com:yajun0310/blog.git (fetch)</span><br><span class="line">origingit@gitee.com:yajun0310/blog.git (push)</span><br></pre></td></tr></table></figure></li><li><p><code>git remote show &lt;remote&gt;</code>显示远端的详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show origin</span><br><span class="line">* remote origin</span><br><span class="line">  Fetch URL: git@gitee.com:yajun0310/blog.git</span><br><span class="line">  Push  URL: git@gitee.com:yajun0310/blog.git</span><br><span class="line">  HEAD branch: master</span><br><span class="line">  Remote branches:</span><br><span class="line">    develop tracked</span><br><span class="line">    master  tracked</span><br><span class="line">  Local branches configured for &apos;git pull&apos;:</span><br><span class="line">    develop merges with remote develop</span><br><span class="line">    master  merges with remote master</span><br><span class="line">  Local refs configured for &apos;git push&apos;:</span><br><span class="line">    develop pushes to develop (up to date)</span><br><span class="line">    master  pushes to master  (up to date)</span><br></pre></td></tr></table></figure></li><li><p><code>git remote add &lt;remote&gt; &lt;url&gt;</code>添加新的远端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin2git@gitee.com:yajun0310/blog.git</span><br></pre></td></tr></table></figure></li><li><p><code>git fetch &lt;remote&gt;</code>下载远程端版本，但不合并到head中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin master</span><br><span class="line">From gitee.com:yajun0310/blog</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br></pre></td></tr></table></figure></li><li><p><code>git remote pull &lt;remote&gt; &lt;url&gt;</code>下载远程版本，并自动与head版本合并</p></li><li><p><code>git pull origin master</code>将远程端版本合并到本地版本中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br><span class="line">From gitee.com:yajun0310/blog</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Already up to date.</span><br></pre></td></tr></table></figure></li><li><p><code>git pull --rebase &lt;remote&gt; &lt;branch&gt;</code>以rebase方式将远程分支与本地分支合并</p></li><li><p><code>git push &lt;remote&gt; &lt;branch&gt;</code>推送到远程branch分支，不存在branch分支会自动新建branch分支</p></li><li><p><code>git push -u &lt;remote&gt; &lt;branch&gt;</code>操作同上，不同的是会自动关联上远程，git push 操作默认推送branch分支</p></li><li><p>删除远程分支since:1.5<code>git push &lt;remote&gt; :&lt;branch&gt;</code>since1.7<code>git push &lt;remote&gt; --delete &lt;branch&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">** since1.5.0 **</span><br><span class="line">$ git push origin :test</span><br><span class="line">remote: Powered by Gitee.com</span><br><span class="line">To gitee.com:yajun0310/blog.git</span><br><span class="line"> - [deleted]         test</span><br><span class="line"></span><br><span class="line">**since 1.7.0**</span><br><span class="line">$ git push origin --delete test</span><br><span class="line">remote: Powered by Gitee.com</span><br><span class="line">To gitee.com:yajun0310/blog.git</span><br><span class="line"> - [deleted]         test</span><br></pre></td></tr></table></figure></li></ol><h4 id="合并与重置"><a href="#合并与重置" class="headerlink" title="合并与重置"></a>合并与重置</h4><ol><li><code>git merge &lt;branch&gt;</code> 将分支合并到当前分支中</li><li><code>git rebase &lt;branch&gt;</code>将分支合并到当前分支（衍合）</li><li><code>git rebase -i &lt;branch&gt;</code> 交互式衍合</li><li><code>git rebase --continue</code> 衍合继续</li><li><code>git rebase --abort</code>取消衍合</li><li><code>git mergetool</code> 使用配置好的merge tool 解决冲突</li><li>在编辑器手动解决冲突后。标记为已解决<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;resolved-file&gt;</span><br><span class="line">git rm &lt;resolved-file&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><ol><li><code>git reset --hard HEAD</code> 放弃工作目录下的所有修改</li><li><code>git reset HEAD</code> 移除缓存区的所有文件（撤销上次 git add）</li><li><code>git checkout HEAD &lt;file&gt;</code>放弃某个文件的所有本地修改</li><li><code>git reset --hard &lt;commit&gt;</code>将head重置到指定的版本，并抛弃到版本之后的所有修改</li><li><code>git revert &lt;commit&gt;</code>重置一个提交，（通过创建一个截然不同的新提交）</li><li><code>git reset --hard  origin/master</code> 用远端分支强制覆盖本地分支</li><li><code>git reset &lt;commit&gt;</code> 将head重置到某一次提交，并将之后的修改标记为未添加到的缓冲区的修改</li><li><code>git reset --keep &lt;commit&gt;</code>将HEAD重制到某一次提交，并保留未提交的本地修改</li><li>删除添加.gitignore文件前错误提交的文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;remove aa file&quot;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;git-命令复习&quot;&gt;&lt;a href=&quot;#git-命令复习&quot; class=&quot;headerlink&quot; title=&quot;git 命令复习&quot;&gt;&lt;/a&gt;git 命令复习&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;参考链接：&lt;/strong&gt;&lt;a href=&quot;https://github.com/flyhigher139/Git-Cheat-Sheet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git Cheat Sheet 中文版 &lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;命令&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;git config --list&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;列出当前配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;git config --local --list&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;列出当前仓库配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;git config --global --list&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;列出全局配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;git config --system --list&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;列出系统配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;git config --global user.name &amp;quot;zyj&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置用户名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;git config --global user.email&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置用户的邮箱&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://blog.zhouyajun.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>小程序文件类型介绍</title>
    <link href="http://blog.zhouyajun.cn/2018/07/19/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/"/>
    <id>http://blog.zhouyajun.cn/2018/07/19/小程序文件类型介绍/</id>
    <published>2018-07-19T06:28:58.000Z</published>
    <updated>2019-06-04T03:31:43.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-文件类型"><a href="#1-文件类型" class="headerlink" title="1. 文件类型"></a>1. 文件类型</h3><ol><li><strong>.json</strong> 后缀的JSON 配置文件</li><li><strong>.wxml</strong> 后缀的 WXML模版文件</li><li><strong>.wxss</strong> 后缀的WXSS样式文件</li><li><strong>.js</strong>  后缀的JS脚本逻辑文件</li></ol><p><strong>注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。</strong></p><h3 id="JSON配置"><a href="#JSON配置" class="headerlink" title="JSON配置"></a>JSON配置</h3><h4 id="小程序全局配置文件-app-json"><a href="#小程序全局配置文件-app-json" class="headerlink" title="小程序全局配置文件 app.json"></a>小程序全局配置文件 app.json</h4><p>app.json是对当前小程序的全局配置，包括了小程序的所有页面路径，界面表现，网络超时时间，底部tab等。</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="center">必填</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>pages</strong></td><td align="left">string Array</td><td align="center">是</td><td align="left">设置页面路径</td></tr><tr><td align="left"><strong>windows</strong></td><td align="left">object</td><td align="center">否</td><td align="left">设置默认页面的窗口表现</td></tr><tr><td align="left"><strong>tabBar</strong></td><td align="left">object</td><td align="center">否</td><td align="left">设置底部tab的表现</td></tr><tr><td align="left"><strong>networkTimeout</strong></td><td align="left">object</td><td align="center">否</td><td align="left">设置网络超时时间</td></tr><tr><td align="left"><strong>debug</strong></td><td align="left">boolean</td><td align="center">否</td><td align="left">设置是否开启debug模式</td></tr></tbody></table><a id="more"></a><h5 id="pages-属性"><a href="#pages-属性" class="headerlink" title="pages 属性"></a>pages 属性</h5><p>接受一个数组，每一项都是字符串，来指定小程序由哪些页面组成。每一项代表对应页面的【路径+文件名】信息，<strong>数组的第一项代表小程序的初始页面。小程序中新增/减少页面，都需要对 pages 数组进行修改。</strong></p><p><strong>文件名不需要写文件后缀</strong>，因为框架会自动去寻找路径下 .json, .js, .wxml, .wxss 四个文件进行整合。</p><h5 id="windows属性"><a href="#windows属性" class="headerlink" title="windows属性"></a>windows属性</h5><p>|属性      | 类型 |  默认值  | 描述   |<br>| :——– | ——–: | :——–: | :——– |:——– |<br>| <strong>navigationBarBackgroundColor</strong> |HexColor|<code>#000000</code>|导航栏背景颜色，如”#000000”|<br>|<strong>navigationBarTextStyle</strong>|string|<code>white</code>|导航栏标题颜色，仅支持 black/white    |<br>|<strong>navigationBarTitleText</strong>|string||导航栏标题文字内容|<br>|<strong>navigationStyle</strong>|string|<code>default</code>|导航栏样式，仅支持 default/custom。custom 模式可自定义导航栏，只保留右上角胶囊状的按钮,<strong>微信版本6.6.0</strong>||<strong>backgroundColor</strong>|HexColor|<code>#ffffff</code>|下拉窗口的背景色|<br>|<strong>backgroundTextStyle</strong>|string|<code>dark</code>|下拉loading的样式，仅支持dark/light|<br>|<strong>backgroundColorTop</strong>|string|<code>#ffffff</code>|顶部窗口的背景色，仅ios支持,<strong>微信版本6.5.16</strong>||<strong>backgroundColorBottom</strong>|string|<code>#ffffff</code>|底部窗口的背景色，仅ios支持,<strong>微信版本6.5.16</strong>||<strong>enablePullDownRefresh</strong>|Boolean|<code>false</code>|是否开启下拉刷新|<br>|<strong>onReachBottomDistance</strong>|Number|50|页面上拉触底事件触发时距页面底部距离，单位为px|</p><p><strong>注：HexColor（十六进制颜色值），如”#ff00ff”</strong></p><p><strong>注：navigationStyle 只在 app.json 中生效。开启 custom 后，低版本客户端需要做好兼容。开发者工具基础库版本切到 1.7.0（不代表最低版本，只供调试用） 可方便切到旧视觉</strong></p><h5 id="tabBar属性"><a href="#tabBar属性" class="headerlink" title="tabBar属性"></a>tabBar属性</h5><p>如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。<br><strong>注意：</strong></p><ol><li>当设置position为top时，将不会显示icon</li><li>tabBar中的list是一个数组，只能配置最少2个，最多5个,tab按数组的顺序排序</li></ol><p><strong>属性说明：</strong></p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="center">必填</th><th align="left">默认中</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>color</strong></td><td align="left">HexColor</td><td align="center">是</td><td align="left"></td><td align="left">tab上文字默认颜色</td></tr><tr><td align="left"><strong>selectColor</strong></td><td align="left">HexColor</td><td align="center">是</td><td align="left"></td><td align="left">tab上文字选中时的颜色</td></tr><tr><td align="left"><strong>backgroundColor</strong></td><td align="left">HexColor</td><td align="center">是</td><td align="left"></td><td align="left">tab 的背景色</td></tr><tr><td align="left"><strong>borderStyle</strong></td><td align="left">string</td><td align="center">否</td><td align="left">black</td><td align="left">tabbar上边框的颜色， 仅支持 black/white</td></tr><tr><td align="left"><strong>list</strong></td><td align="left">Array</td><td align="center">是</td><td align="left"></td><td align="left">tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td></tr><tr><td align="left"><strong>position</strong></td><td align="left">string</td><td align="center">否</td><td align="left">bottom</td><td align="left">可选值bottom、top</td></tr></tbody></table><p><strong>其中 list 接受一个数组，数组中的每个项都是一个对象，其属性值如下：</strong></p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">必填</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>pagePath</strong></td><td align="left">string</td><td align="left">是</td><td align="left">页面路径，必须在pages中先定义</td></tr><tr><td align="left"><strong>text</strong></td><td align="left">string</td><td align="left">是</td><td align="left">tab上按钮文字</td></tr><tr><td align="left"><strong>iconPath</strong></td><td align="left">string</td><td align="left">否</td><td align="left">图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片</td></tr><tr><td align="left"><strong>selectedIconPath</strong></td><td align="left">string</td><td align="left">否</td><td align="left">选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td></tr></tbody></table><p><img src="https://developers.weixin.qq.com/miniprogram/dev/image/tabbar.png?t=2018723" alt="图片属性说明"></p><h5 id="networkTimeout-属性"><a href="#networkTimeout-属性" class="headerlink" title="networkTimeout    属性"></a>networkTimeout    属性</h5><p>可以设置各种网络请求的超时时间。</p><p><strong>属性说明：</strong></p><table><thead><tr><th align="left">属性</th><th align="right">类型</th><th align="center">必填</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>request</strong></td><td align="right">Number</td><td align="center">否</td><td align="left">wx.request的超时时间，单位毫秒，默认为：60000</td></tr><tr><td align="left"><strong>connectSocket</strong></td><td align="right">Number</td><td align="center">否</td><td align="left">wx.connectSocket的超时时间，单位毫秒，默认为：60000</td></tr><tr><td align="left"><strong>uploadFile</strong></td><td align="right">Number</td><td align="center">否</td><td align="left">wx.uploadFile的超时时间，单位毫秒，默认为：60000</td></tr><tr><td align="left"><strong>downloadFile</strong></td><td align="right">Number</td><td align="center">否</td><td align="left">wx.downloadFile的超时时间，单位毫秒，默认为：60000</td></tr></tbody></table><h5 id="debug属性"><a href="#debug属性" class="headerlink" title="debug属性"></a>debug属性</h5><p>可以在开发者工具中开启debug模式，在开发者工具的控制面板，调试信息以 info    的形式给出，其信息有page 的注册，页面路由，数据更新，事件触发。可以帮助开发者快速定位一些常见的问题。</p><h4 id="page-json"><a href="#page-json" class="headerlink" title="page.json"></a>page.json</h4><p>每一个小程序页面也可以使用.json文件来对本页面的窗口表现进行配置。 页面的配置比app.json全局配置简单得多，只是设置 app.json 中的 window 配置项的内容，页面中配置项会覆盖 app.json 的 window 中相同的配置项。</p><p>页面的.json只能设置 window 相关的配置项，以决定本页面的窗口表现，所以无需写 window 这个键。</p><table><thead><tr><th align="left">属性</th><th align="right">类型</th><th align="center">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>navigationBarBackgroundColor</strong></td><td align="right">HexColor</td><td align="center"><code>#000000</code></td><td align="left">导航栏背景颜色，如”#000000”</td></tr><tr><td align="left"><strong>navigationBarTextStyle</strong></td><td align="right">string</td><td align="center"><code>white</code></td><td align="left">导航栏标题颜色，仅支持 black/white</td></tr><tr><td align="left"><strong>navigationBarTitleText</strong></td><td align="right">string</td><td align="center"></td><td align="left">导航栏标题文字内容</td></tr><tr><td align="left"><strong>navigationStyle</strong></td><td align="right">string</td><td align="center"><code>default</code></td><td align="left">导航栏样式，仅支持 default/custom。custom 模式可自定义导航栏，只保留右上角胶囊状的按钮,<strong>微信版本6.6.0</strong></td></tr><tr><td align="left"><strong>backgroundColor</strong></td><td align="right">HexColor</td><td align="center"><code>#ffffff</code></td><td align="left">下拉窗口的背景色</td></tr><tr><td align="left"><strong>backgroundTextStyle</strong></td><td align="right">string</td><td align="center"><code>dark</code></td><td align="left">下拉loading的样式，仅支持dark/light</td></tr><tr><td align="left"><strong>backgroundColorTop</strong></td><td align="right">string</td><td align="center"><code>#ffffff</code></td><td align="left">顶部窗口的背景色，仅ios支持,<strong>微信版本6.5.16</strong></td></tr><tr><td align="left"><strong>backgroundColorBottom</strong></td><td align="right">string</td><td align="center"><code>#ffffff</code></td><td align="left">底部窗口的背景色，仅ios支持,<strong>微信版本6.5.16</strong></td></tr><tr><td align="left"><strong>enablePullDownRefresh</strong></td><td align="right">Boolean</td><td align="center"><code>false</code></td><td align="left">是否开启下拉刷新</td></tr><tr><td align="left"><strong>onReachBottomDistance</strong></td><td align="right">Number</td><td align="center"><code>50</code></td><td align="left">页面上拉触底事件触发时距页面底部距离，单位为px</td></tr><tr><td align="left"><strong>disableScroll</strong></td><td align="right">Boolean</td><td align="center"><code>false</code></td><td align="left">设置为 true 则页面整体不能上下滚动；只在 page.json 中有效，无法在 app.json 中设置该项</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-文件类型&quot;&gt;&lt;a href=&quot;#1-文件类型&quot; class=&quot;headerlink&quot; title=&quot;1. 文件类型&quot;&gt;&lt;/a&gt;1. 文件类型&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;.json&lt;/strong&gt; 后缀的JSON 配置文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.wxml&lt;/strong&gt; 后缀的 WXML模版文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.wxss&lt;/strong&gt; 后缀的WXSS样式文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.js&lt;/strong&gt;  后缀的JS脚本逻辑文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;JSON配置&quot;&gt;&lt;a href=&quot;#JSON配置&quot; class=&quot;headerlink&quot; title=&quot;JSON配置&quot;&gt;&lt;/a&gt;JSON配置&lt;/h3&gt;&lt;h4 id=&quot;小程序全局配置文件-app-json&quot;&gt;&lt;a href=&quot;#小程序全局配置文件-app-json&quot; class=&quot;headerlink&quot; title=&quot;小程序全局配置文件 app.json&quot;&gt;&lt;/a&gt;小程序全局配置文件 app.json&lt;/h4&gt;&lt;p&gt;app.json是对当前小程序的全局配置，包括了小程序的所有页面路径，界面表现，网络超时时间，底部tab等。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;属性&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;类型&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;必填&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;pages&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;string Array&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;是&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置页面路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;windows&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;object&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;否&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置默认页面的窗口表现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;tabBar&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;object&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;否&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置底部tab的表现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;networkTimeout&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;object&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;否&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置网络超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;debug&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;boolean&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;否&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置是否开启debug模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://blog.zhouyajun.cn/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://blog.zhouyajun.cn/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="微信" scheme="http://blog.zhouyajun.cn/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
</feed>
